-- phpMyAdmin SQL Dump
-- version 4.9.0.1
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Фев 04 2021 г., 16:24
-- Версия сервера: 10.3.13-MariaDB-log
-- Версия PHP: 7.1.32

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `kobizo`
--

-- --------------------------------------------------------

--
-- Структура таблицы `doctrine_migration_versions`
--

CREATE TABLE `doctrine_migration_versions` (
  `version` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `executed_at` datetime DEFAULT NULL,
  `execution_time` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Дамп данных таблицы `doctrine_migration_versions`
--

INSERT INTO `doctrine_migration_versions` (`version`, `executed_at`, `execution_time`) VALUES
('DoctrineMigrations\\Version20210127184029', '2021-01-27 18:40:50', 44),
('DoctrineMigrations\\Version20210127200059', '2021-01-27 20:06:38', 43);

-- --------------------------------------------------------

--
-- Структура таблицы `metas`
--

CREATE TABLE `metas` (
  `id` int(11) NOT NULL,
  `post_id` int(11) NOT NULL,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `value` varchar(1000) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `metas`
--

INSERT INTO `metas` (`id`, `post_id`, `meta_key`, `value`) VALUES
(8, 63, 'Author', 'x4lva'),
(9, 63, 'Category', 'JavaScript');

-- --------------------------------------------------------

--
-- Структура таблицы `post`
--

CREATE TABLE `post` (
  `id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `post`
--

INSERT INTO `post` (`id`, `title`, `content`, `status`, `created_at`, `updated_at`) VALUES
(9, 'Implementing Offline traceroute Tool Using Python', '<p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Hey everyone! This post was born from a question asked by an IT forum member. The summary of the question looked as follows:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><ul style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">There is a set of text files containing routing tables collected from various network devices.</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Each file represents one device.</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Device platforms and routing table formats may vary.</li><li style=\"padding: 9px 0px; line-height: 1.6;\">It is required to analyze a routing path from any device to an arbitrary subnet or host on-demand.</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Resulting output should contain a list of routing table entries that are used for the routing to the given destination on each hop.</li></ul><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The one who asked a question worked as a TAC engineer. It is often that they collect or receive from the customers some text \'snapshots\' of the network state for further offline analysis while troubleshooting the issues. Some automation could really save a lot of time.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">I found this task interesting and also applicable to my own needs, so I decided to write a Proof-of-Concept implementation in Python 3 for Cisco IOS, IOS-XE, and ASA routing table format.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">In this article, I’ll try to reconstruct the resulting script development process and my considerations behind each step.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let’s get started.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><a name=\"habracut\" style=\"background-color: rgb(255, 255, 255); color: rgb(84, 142, 170); text-decoration: none; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px; font-weight: 400;\"></a><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><h2 id=\"disclaimer\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Disclaimer</h2><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">This is a translation of my original article in Russian I posted in June 2018.\r\nIf you are willing to help to improve the translation, please DM me.\r\nAll listed code is published under MIT license and does not provide guarantees of \r\nany kind.\r\n\r\nThe solution is written in Python 3.7.\r\nAn understanding of the programming and networking basics is desirable for reading.\r\n\r\nIf you found a typo, please use Ctrl+Enter or ⌘+Enter to send it to the author.</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><h1 id=\"task-decomposition-and-requirements-analysis\" style=\"font-size: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; -webkit-font-smoothing: antialiased; padding: 0px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Task Decomposition and Requirements Analysis</h1><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Considering the initial task summary, I would split it into two main parts:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><ul style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">Extracting the routing tables from the text files into some representation in Python data structures.</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Analyzing routing paths based on that pre-processed routing data.</li></ul><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Such logic separation will allow us to import the routing data from different sources (e.g. APIs or SNPM) and not limiting the potential scope to text file input.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">To improve route lookup performance, it is necessary to initialize the files just once on script startup.<br>The solution will support Cisco IOS, IOS-XE, and ASA routing table output format for IPv4. Extensibility logic applies here as well.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As we know, a route selection during routing table lookup relies on a Longest Prefix Match (LPM) logic. Unlike with Access Control lists, it is not enough to pick the first match. We have to find the most specific one.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Fortunately, there are fast algorithms and approaches for LPM calculation. One of them is building a so-called prefix tree (prefix trees may also be referenced to as Subnet Tries, Patricia Tries, or Radix Trees in the general case) based on a routing table.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">In prefix trees, the lookup speed does not depend on the tree size (the number of prefixes), it only depends on a tree depth (maximum prefix length) which is a maximum of 32 for IPv4 (programmers would say that the search time complexity is O(k), where&nbsp;<em>k</em>&nbsp;is the maximum prefix length). In other words, route lookup using prefix trees will work with the same average speed on routing tables containing 500 and 500,000 routes.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Initial tree building time does linearly depend on a number of prefixes and their length (programmers would say that the build time complexity is O(n*k) where&nbsp;<em>n</em>&nbsp;is the number of prefixes and&nbsp;<em>k</em>&nbsp;is the maximum prefix length), but we do this just once. Any subsequent search request will work super fast.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">A detailed explanation of this algorithm deserves a dedicated article.\r\nPlease let me know if you are interested.</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As we are not limited in usage of an external dependencies, we can use some existing Python library implementing this. Some of them are:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><ul style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\"><a href=\"https://pypi.org/project/pysubnettree/\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">SubnetTree</a>. I wrote my original solution based on this library. It works really fast. But its internal code is written in C++ which causes some compatibility issues and dependency hell across operating systems.</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\"><a href=\"https://github.com/jsommers/pytricia\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">PyTricia</a>. This library looks best in terms of performance and compatibility in early 2021. It is written in C, so it should work more seamlessly in different OSs. So I migrated my solution to this library. Thanks to the selected code design, it was a matter of a few changed lines of code.</li></ul><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We should also keep in mind that the analyzed network segment may contain routing loops. They should be detected. It should not break the script execution.<br>The routers may also have no route to the destination. That’s another point to note.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Routing tables for&nbsp;<a href=\"https://www.cisco.com/c/en/us/td/docs/solutions/Enterprise/Network_Virtualization/PathIsol.html#wp80043\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">VRF</a>s, if present, should be saved into dedicated text files as each VRF instance represents a separate logical device from the routing and topology perspective.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Hardware performance limitations for script execution, the potential size of the routing tables and the network segments were not in a list of initial requirements. However, let’s take them into account.<br>Most modern network platforms support over 1M routing entries on average. IPv4 BGP Full View size is around 814,000 prefixes as of January 2021.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">My rough estimations and tests showed that in-memory processing of each 1M prefixes requires ~500MB of RAM for this scenario. Even a mid-level laptop with 8GB RAM should allow you to process a topology consisting of 17-18 routers with Full View on each of them (~12-13M prefixes in total). I believe this is enough for most of the cases. For larger network segments, the analysis can either be split into smaller scopes or moved into an external out-of-memory database.<br><del>640 kB ought to be enough for anybody.</del>&nbsp;Let\'s stick on an in-memory processing option.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><h2 id=\"parsing-source-files-and-selecting-data-structures\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Parsing Source Files and Selecting Data Structures</h2><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s store all our text files with routing tables in a separate variable-defined sub-directory:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">RT_DIRECTORY = <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"./routing_tables\"</span></code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Here is a reference of IOS and IOS-XE routing table output format:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><div class=\"spoiler\" role=\"button\" tabindex=\"0\" style=\"outline: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><span class=\"spoiler_title\" style=\"border-bottom: 1px dotted; color: rgb(84, 142, 170); cursor: pointer;\">show ip route</span></div><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Cisco ASA looks very similar. The difference is ASA displays full subnet masks instead of prefix lengths:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><div class=\"spoiler\" role=\"button\" tabindex=\"0\" style=\"outline: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><span class=\"spoiler_title\" style=\"border-bottom: 1px dotted; color: rgb(84, 142, 170); cursor: pointer;\">show route</span></div><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The examples show that, despite the multitude of options, all routing table entries have a predictable format. So they can be processed with regular expressions.<br>There are two common groups based on route entry format:&nbsp;<em>Local+Connected</em>&nbsp;types and all the rest.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The existence of multi-line routes for multi-path routing cases makes them harder to extract. We can not use simple line iteration through the content of the files because of that. One of the workarounds is to iterate through regular expression matches covering multiple lines.<br></p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s write such regular expressions:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># Local and Connected route strings matching.</span>\r\nREGEXP_ROUTE_LOCAL_CONNECTED = re.compile(\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'^(?P&lt;routeType&gt;[L|C])\\s+\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'((?P&lt;ipaddress&gt;\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?)\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'\\s?\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'(?P&lt;maskOrPrefixLength&gt;(\\/\\d\\d?)?\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'|(\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?)?))\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'\\ is\\ directly\\ connected\\,\\ \'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'(?P&lt;interface&gt;\\S+)\'</span>,\r\n    re.MULTILINE\r\n)\r\n\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># Static and dynamic route strings matching.</span>\r\nREGEXP_ROUTE = re.compile(\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'^(\\S\\S?\\*?\\s?\\S?\\S?)\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'\\s+\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'((?P&lt;subnet&gt;\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?)\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'\\s?\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'(?P&lt;maskOrPrefixLength&gt;(\\/\\d\\d?)?\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'|(\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?)?))\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'\\s*\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'(?P&lt;viaPortion&gt;(?:\\n?\\s+(\\[\\d\\d?\\d?\\/\\d+\\])\\s+\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'via\\s+(\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?)(.*)\\n?)+)\'</span>,\r\n    re.MULTILINE\r\n)</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Both regular expressions contain (<a href=\"https://docs.python.org/2/library/re.html\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">named groups</a>) to make them more readable and maintainable.<br>You can reference the named group value within the regular expression match by its key:&nbsp;<em>subnet</em>/<em>interface</em>/<em>maskOrPrefixLength</em>&nbsp;for the prefix info and&nbsp;<em>viaPortion</em>/<em>interface</em>&nbsp;for the route destination info in our case.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The regular expression covers subnet mask and prefix length representations at once. It can be extracted by&nbsp;<em>maskOrPrefixLength</em>&nbsp;key. For a further processing, let\'s bring it to a common format of the prefix length as it is shorter:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">convert_netmask_to_prefix_length</span>(<span class=\"hljs-params\">mask_or_pref</span>):</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"\"\r\n    Gets subnet_mask (XXX.XXX.XXX.XXX) of /prefix_length (/XX).\r\n    For subnet_mask, converts it to /prefix_length and returns the result.\r\n    For /prefix_length, returns as is.\r\n    For empty input, returns \"\" string.\r\n    \"\"\"</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">not</span> mask_or_pref:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> re.match(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\"^\\/\\d\\d?$\"</span>, mask_or_pref):\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> mask_or_pref\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> re.match(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\"^\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?$\"</span>,\r\n                mask_or_pref):\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> (\r\n            <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"/\"</span>\r\n            + str(sum([bin(int(x)).count(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"1\"</span>) <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> x <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> mask_or_pref.split(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\".\"</span>)]))\r\n        )\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"</span></code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s also write a regular expression for next-hop extraction from the&nbsp;<em>viaPortion</em>&nbsp;group and a regular expression for IPv4 address format check in a file and user input:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># Route string VIA portion matching.</span>\r\nREGEXP_VIA_PORTION = re.compile(\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'.*via\\s+(\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?).*\'</span>\r\n)\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># RegEx template string for IPv4 address matching.</span>\r\nREGEXP_IPv4_STR = (\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.\'</span>\r\n    + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\'</span>\r\n)\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># IPv4 CIDR notation matching in user input.</span>\r\nREGEXP_INPUT_IPv4 = re.compile(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\"^\"</span> + REGEXP_IPv4_STR + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">r\"(\\/\\d\\d?)?$\"</span>)</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now let\'s translate our network representation into Python data structures.<br>All the prefixes we extract from the routing tables will be used as prefix tree keys. Each prefix tree object will be inherited from the&nbsp;<em>PyTricia</em>&nbsp;module. Search result on a prefix tree will return a list of available next-hops and a full-text representation of the matched routing entry. Another list will store a list of local interfaces with their IP-addresses for each router.<br>Each router will be represented by a dictionary object containing all above.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># Example data structures</span>\r\nroute_tree = pytricia.PyTricia()\r\nroute_tree[’subnet’] = ((next_hop_1, next_hop_n), raw_route_string)\r\ninterface_list = ((interface_1, ip_address_1), (interface_n, ip_address_n))\r\nconnected_networks = ((interface_1, subnet_1), (interface_n, subnet_n))\r\nrouter = {\r\n    ‘routing_table’: route_tree,\r\n    ‘interface_list’: interface_list,\r\n    ‘connected_networks’: connected_networks,\r\n}</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now we can implement a route lookup function:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">route_lookup</span>(<span class=\"hljs-params\">destination, router</span>):</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> destination <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> router[<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'routing_table\'</span>]:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> router[<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'routing_table\'</span>][destination]\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> (<span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">None</span>, <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">None</span>)</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">To distinguish between the routers, it is important to assign some unique router identifier (RID) for each of them. Router ID generation and selection algorithms might be different. In our case, let\'s use a filename as a RID for simplicity.<br>Let\'s put all resulting routers into a dictionary with RIDs as keys and corresponding router objects as values:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">ROUTERS = {\r\n    ‘router_id_1’: router_1,\r\n    ‘router_id_n’: router_n,\r\n}</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We also need to implement some next-hop RID resolution mechanism by known next-hop IP-address (think of ARP).<br>Let\'s create one more prefix tree containing IP-addresses of all discovered router as keys and RID with interface types as corresponding values:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># Example</span>\r\nGLOBAL_INTERFACE_TREE = pytricia.PyTricia()\r\nGLOBAL_INTERFACE_TREE[‘ip_address’] = (router_id, interface_type)\r\n\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># Returns RouterID by Interface IP address which it belongs to.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">get_rid_by_interface_ip</span>(<span class=\"hljs-params\">interface_ip</span>):</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> interface_ip <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> GLOBAL_INTERFACE_TREE:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> GLOBAL_INTERFACE_TREE[interface_ip][<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>]</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now let\'s combine our IOS/IOS-XE/ASA format parsers into a single function. It will take a text routing table as an input and return a router dictionary object of a format we discussed earlier:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">parse_show_ip_route_ios_like</span>(<span class=\"hljs-params\">raw_routing_table</span>):</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"\"\r\n    Parser for routing table text output.\r\n    Compatible with both Cisco IOS(IOS-XE) \'show ip route\'\r\n    and Cisco ASA \'show route\' output format.\r\n    Processes input text file and write into Python data structures.\r\n    Builds internal PyTricia search tree in \'route_tree\'.\r\n    Generates local interface list for a router in \'interface_list\'\r\n    Returns \'router\' dictionary object with parsed data.\r\n    \"\"\"</span>\r\n    router = {}\r\n    route_tree = pytricia.PyTricia()\r\n    interface_list = []\r\n    <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># Parse Local and Connected route strings in text.</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> raw_route_string <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> REGEXP_ROUTE_LOCAL_CONNECTED.finditer(raw_routing_table):\r\n        subnet = (\r\n            raw_route_string.group(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'ipaddress\'</span>)\r\n            + convert_netmask_to_prefix_length(\r\n                raw_route_string.group(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'maskOrPrefixLength\'</span>)\r\n            )\r\n        )\r\n        interface = raw_route_string.group(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'interface\'</span>)\r\n        route_tree[subnet] = ((interface,), raw_route_string.group(<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>))\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> raw_route_string.group(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'routeType\'</span>) == <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'L\'</span>:\r\n            interface_list.append((interface, subnet,))\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">not</span> interface_list:\r\n        print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Failed to find routing table entries in given output\'</span>)\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">None</span>\r\n    <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># parse static and dynamic route strings in text</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> raw_route_string <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> REGEXP_ROUTE.finditer(raw_routing_table):\r\n        subnet = (\r\n            raw_route_string.group(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'subnet\'</span>)\r\n            + convert_netmask_to_prefix_length(\r\n                raw_route_string.group(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'maskOrPrefixLength\'</span>)\r\n            )\r\n        )\r\n        via_portion = raw_route_string.group(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'viaPortion\'</span>)\r\n        next_hops = []\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> via_portion.count(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'via\'</span>) &gt; <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>:\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> line <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> via_portion.splitlines():\r\n                <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> line:\r\n                    next_hops.append(REGEXP_VIA_PORTION.match(line).group(<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>))\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n            next_hops.append(REGEXP_VIA_PORTION.match(via_portion).group(<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>))\r\n        route_tree[subnet] = (next_hops, raw_route_string.group(<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>))\r\n    router = {\r\n        <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'routing_table\'</span>: route_tree,\r\n        <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'interface_list\'</span>: interface_list,\r\n    }\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> router</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">To improve extensibility, let\'s wrap all parsers into another function:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">parse_text_routing_table</span>(<span class=\"hljs-params\">raw_routing_table</span>):</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"\"\r\n    Parser functions wrapper.\r\n    Add additional parsers for alternative routing table syntaxes here.\r\n    \"\"\"</span>\r\n    router = parse_show_ip_route_ios_like(raw_routing_table)\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> router:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> router</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Finally, we need a function to go through a directory containing our routing table text files.<br>It will take a directory path as an input and return a dictionary of all discovered routers:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">do_parse_directory</span>(<span class=\"hljs-params\">rt_directory</span>):</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"\"\r\n    Go through the specified directory and parse all .txt files.\r\n    Generate router objects based on parse result if any.\r\n    Populate new_routers with those router objects.\r\n    The default key for each router object is FILENAME.\r\n    Return new_routers.\r\n    \"\"\"</span>\r\n    new_routers = {}\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">not</span> os.path.isdir(rt_directory):\r\n        print(\r\n            <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"{} directory does not exist.\"</span>.format(rt_directory)\r\n            + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"Check rt_directory variable value.\"</span>\r\n        )\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">None</span>\r\n    start_time = time()\r\n    print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"Initializing files...\"</span>)\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> FILENAME <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> os.listdir(rt_directory):\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> FILENAME.endswith(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'.txt\'</span>):\r\n            file_init_start_time = time()\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">with</span> open(os.path.join(rt_directory, FILENAME), <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'r\'</span>) <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> f:\r\n                print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Opening {}\'</span>.format(FILENAME))\r\n                raw_table = f.read()\r\n                new_router = parse_text_routing_table(raw_table)\r\n                router_id = FILENAME.replace(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'.txt\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'\'</span>)\r\n                <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> new_router:\r\n                    new_routers[router_id] = new_router\r\n                    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> new_router[<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'interface_list\'</span>]:\r\n                        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> iface, addr <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> new_router[<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'interface_list\'</span>]:\r\n                            GLOBAL_INTERFACE_TREE[addr] = (router_id, iface,)\r\n                <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n                    print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Failed to parse \'</span> + FILENAME)\r\n            print(\r\n                FILENAME\r\n                + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\" parsing has been completed in {} sec\"</span>.format(\r\n                    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"{:.3f}\"</span>.format(time() - file_init_start_time)\r\n                )\r\n            )\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">not</span> new_routers:\r\n            print(\r\n                <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"Could not find any valid .txt files with routing tables\"</span>\r\n                + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\" in {} directory\"</span>.format(rt_directory)\r\n            )\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n            print(\r\n                <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\\nAll files have been initialized\"</span>\r\n                + <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\" in {} sec\"</span>.format(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"{:.3f}\"</span>.format(time() - start_time))\r\n            )\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> new_routers</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Once we have the structured data, we can move to the routing paths analysis part of the task.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><h2 id=\"analyzing-routing-paths\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Analyzing Routing Paths</h2><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">In general, the task at this stage is to analyze the network graph. Routers are graph vertices and L3-links are graph edges.&nbsp;<em>ROUTERS</em>&nbsp;dictionary stores Router IDs as keys and next-hop IP-addresses as values.&nbsp;<em>GLOBAL_INTERFACE_TREE</em>&nbsp;returns RIDs by next-hop IP-addresses at the same time. So&nbsp;<em>ROUTERS</em>&nbsp;and&nbsp;<em>GLOBAL_INTERFACE_TREE</em>&nbsp;together define a graph adjacency table.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If we draw parallels with real routers, to find a path, you need to reproduce their high-level work logic (not taking RIB/FIB/ASIC and different optimizations into account) during the packet processing: from routing table lookup to ARP-request (<em>router_id</em>&nbsp;in our case) and further packet forwarding or drop depending on the result.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">To achieve this, let\'s implement a recursive path search algorithm. Each path segment will be represented by a list containing&nbsp;<em>router_id</em>&nbsp;(RID) and&nbsp;<em>raw_route_string</em>&nbsp;(matched route string). The current path will be stored in a&nbsp;<em>path</em>&nbsp;tuple. As we might have multiple paths, the resulting list of them will be stored in a&nbsp;<em>paths</em>&nbsp;tuple. Individual&nbsp;<em>path</em>&nbsp;will be appended to&nbsp;<em>paths</em>&nbsp;once the current path analysis reached the end (the destination or no route to the destination at some point) or on routing loop detection. The function will take a RID we start from and a target IP we are searching path to as an input and return resulting&nbsp;<em>paths</em>.</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">trace_route</span>(<span class=\"hljs-params\">source_router_id, target_ip, path=[]</span>):</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"\"\r\n    Performs recursive path search from source Router ID (RID) to target subnet.\r\n    Returns tuple of path tuples.\r\n    Each path tuple contains a sequence of Router IDs with matched route strings.\r\n    Multiple paths are supported.\r\n    \"\"\"</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">not</span> source_router_id:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> [path + [(<span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">None</span>, <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">None</span>)]]\r\n    current_router = ROUTERS[source_router_id]\r\n    next_hop, raw_route_string = route_lookup(target_ip, current_router)\r\n    path = path + [(source_router_id, raw_route_string)]\r\n    paths = []\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> next_hop:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> nexthop_is_local(next_hop[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>]):\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> [path]\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> nh <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> next_hop:\r\n            next_hop_rid = get_rid_by_interface_ip(nh)\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> next_hop_rid <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">not</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> [r[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>] <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> r <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> path]:\r\n                inner_path = trace_route(next_hop_rid, target_ip, path)\r\n                <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> p <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> inner_path:\r\n                    paths.append(p)\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n                path = path + [(next_hop_rid+<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"&lt;&lt;LOOP DETECTED\"</span>, <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">None</span>)]\r\n                <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> [path]\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> [path]\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> paths\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">nexthop_is_local</span>(<span class=\"hljs-params\">next_hop</span>):</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"\"\r\n    Check if next-hop points to the local interface.\r\n    Will be True for Connected and Local route strings on Cisco devices.\r\n    \"\"\"</span>\r\n    interface_types = (\r\n        <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Eth\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Fast\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Gig\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Ten\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Port\'</span>,\r\n        <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Serial\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Vlan\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Tunn\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Loop\'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Null\'</span>\r\n    )\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> type <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> interface_types:\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> next_hop.startswith(type):\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">True</span></code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s also implement a function to provide interactive path lookup ability to our script user.<br>It will perform a path search to the given IP-address from all the discovered routers:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">do_user_interactive_search</span>():</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\"\"\r\n    Provides interactive search dialog for users.\r\n    Asks user for target subnet or host in CIDR notation.\r\n    Validates input. Prints error and goes back to start for invalid input.\r\n    Executes path search to given target from each router in global ROUTERS.\r\n    Prints formatted path search results.\r\n    Goes back to start.\r\n    \"\"\"</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">while</span> <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">True</span>:\r\n        print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'\\n\'</span>)\r\n        target_subnet = input(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Enter Target Subnet or Host: \'</span>)\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">not</span> target_subnet:\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">continue</span>\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">not</span> REGEXP_INPUT_IPv4.match(target_subnet.replace(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\' \'</span>, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'\'</span>)):\r\n            print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"incorrect input\"</span>)\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">continue</span>\r\n        lookup_start_time = time()\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> rtr <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> ROUTERS.keys():\r\n            subsearch_start_time = time()\r\n            result = trace_route(rtr, target_subnet)\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> result:\r\n                print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\\n\"</span>)\r\n                print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"PATHS TO {} FROM {}\"</span>.format(target_subnet, rtr))\r\n                n = <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>\r\n                print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'Detailed info:\'</span>)\r\n                <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> r <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> result:\r\n                    print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"Path {}:\"</span>.format(n))\r\n                    print([h[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>] <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> h <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> r])\r\n                    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> hop <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> r:\r\n                        print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"ROUTER: {}\"</span>.format(hop[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>]))\r\n                        print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"Matched route string: \\n{}\"</span>.format(hop[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>]))\r\n                    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n                        print(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'\\n\'</span>)\r\n                    n += <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>\r\n                <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n                    print(\r\n                        <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"Path search on {} has been completed in {} sec\"</span>.format(\r\n                           rtr, <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"{:.3f}\"</span>.format(time() - subsearch_start_time)\r\n                        )\r\n                    )\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span>:\r\n            print(\r\n                <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"\\nFull search has been completed in {} sec\"</span>.format(\r\n                   <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"{:.3f}\"</span>.format(time() - lookup_start_time),\r\n                )\r\n            )</code></pre><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Bringing the logic together:</p><p class=\"copy-width first-line-bold\" style=\"margin-right: auto; margin-bottom: 0px; margin-left: auto; padding: 0px; max-width: 740px; width: 740px; color: rgb(17, 17, 17); font-family: BWHaasDingbat, &quot;Publico Text Web&quot;, TiemposText-Regular, Georgia, serif; font-size: 22px;\"><br style=\"color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-size: 16px;\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"python hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">def</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">main</span>():</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">global</span> ROUTERS\r\n    ROUTERS = do_parse_directory(RT_DIRECTORY)\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> ROUTERS:\r\n        do_user_interactive_search()\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> __name__ == <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"__main__\"</span>:\r\n    main() </code></pre>', 'Published', '2021-01-29 13:06:05', NULL);
INSERT INTO `post` (`id`, `title`, `content`, `status`, `created_at`, `updated_at`) VALUES
(10, 'Prometheus in Action: from default counters to SLO-related queries', '<h2 style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">A Gentle Intro</h2><figure class=\"\" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/73d/ffb/cb3/73dffbcb3f6469ec1a746bbbf6e61de1.png\" width=\"150\" height=\"149\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">All Prometheus metrics are based on&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">time series</span>&nbsp;- streams of timestamped values belonging to the same metric. Each time series is uniquely identified by its metric name and optional key-value pairs called labels. The metric name specifies some characteristics of the measured system, such as&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">http_requests_total</code>&nbsp;- the total number of received HTTP requests. In practice, you often will be interested in some subset of the values of a metric, for example, in the number of requests received by a particular endpoint; and here is where the labels come in handy. We can partition a metric by adding&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">endpoint</code>&nbsp;label and see the statics for a particular endpoint:&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">http_requests_total{endpoint=\"api/status\"}.</code>&nbsp;Every metric has two automatically created labels:&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">job_name</code>&nbsp;and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">instance</code>. We see their roles in the next section.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Prometheus provides a functional query language called PromQL. The result of the query might be evaluated to one of four types:</p><ul style=\"margin: 32px 0px 0px; padding: 0px 0px 0px 32px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"line-height: 24px; position: relative; margin-top: 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\"><span style=\"font-weight: bolder; margin-top: 0px;\">Scalar</span>&nbsp;(aka float)</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\"><span style=\"font-weight: bolder; margin-top: 0px;\"><em style=\"margin-top: 0px;\">String</em></span><em>&nbsp;(currently unused)</em></p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\"><span style=\"font-weight: bolder; margin-top: 0px;\">Instant Vector</span>&nbsp;- a set of time series that have exactly one value per timestamp.</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\"><span style=\"font-weight: bolder; margin-top: 0px;\">Range Vector</span>&nbsp;- a set of time series that have a range of values between two timestamps.</p></li></ul><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">At first glance,&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">Instant Vector</span>&nbsp;might look like an array, and&nbsp;<span style=\"font-weight: bolder;\">Range Vector</span>&nbsp;as a matrix.</p><figure class=\"\" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/78a/6eb/f23/78a6ebf2306a7ce5d82e83490334654f.jpg\" width=\"1576\" height=\"634\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If that would be the case, then a Range Vector for a single time series \"downgrades\" to an Instant Vector. However, that\'s not the case: the difference between a Range Vector and an Instant Vector is not in the number of tracked time series but in the relation between a value of the metric and the corresponding timestamp. In Instant Vector a time series has a single value at the timestamp, in Range Vector a time series has an arbitrary number of values between two timestamps. Therefore, we can more accurately visualize a Range Vector in the following form:</p><figure class=\"\" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/407/683/349/407683349c1c2f0ec09669cd941d65ff.jpg\" width=\"1677\" height=\"595\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The difference between an instant vector and a range vector will be more clearly seen in the action: let\'s instrument a Go application and see how can Prometheus help us with insights.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">A&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">Counter</span>&nbsp;is a metric that only goes up, for example, a number of the incoming HTTP requests.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">A&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">Gauge</span>&nbsp;is a metric that can have an arbitrary float value, for example, current CPU usage.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">A&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">Histogram</span>&nbsp;summarizes observations into statistical buckets, for example, we can track an API\'s response times. Why would one need a histogram and can\'t just measure the average response time? This is because we are not always interested in the average response times only. Let\'s say we have an SLO and 95% of the requests should take no longer than 300 ms. We need to single out all requests that took 300 ms or less, count their amount, and divide it by the total number of the request. To do so in Prometheus, we configure a histogram to have a bucket with an upper limit of 0.3 seconds for a response. Later we see how can we configure an alert if we fail to comply with the SLO.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">There is also a&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">Summary,</span>&nbsp;however it is left mostly for historical reasons and serves the same purpose as a histogram.</p><h2 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Instrumenting a Go application</h2><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s start&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">without</span>&nbsp;a Prometheus server.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"go hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">package</span> main\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> (\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"net/http\"</span>\r\n\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"github.com/prometheus/client_golang/prometheus/promhttp\"</span>\r\n)\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">func</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">main</span><span class=\"hljs-params\">()</span></span> {\r\n    http.Handle(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"/metrics\"</span>, promhttp.Handler())\r\n    http.ListenAndServe(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\":2112\"</span>, <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">nil</span>)\r\n}\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">promhttp.Handler</code>&nbsp;returns an http.Handler which is already instrumented with the default metrics. Let\'s see what we get right out of the box by issuing a GET request to the&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">/metrics</code>&nbsp;endpoint.</p><blockquote style=\"padding: 12px 24px; background-image: initial; background-position: 0px 0px; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-left: 4px solid rgb(84, 142, 170); margin-top: 32px; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\"><code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">http localhost:2112/metrics</code></p></blockquote><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"bash hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic; margin-top: 0px;\"># HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># TYPE go_gc_duration_seconds summary</span>\r\ngo_gc_duration_seconds{quantile=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"0\"</span>} 0\r\ngo_gc_duration_seconds{quantile=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"0.25\"</span>} 0\r\ngo_gc_duration_seconds{quantile=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"0.5\"</span>} 0\r\ngo_gc_duration_seconds{quantile=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"0.75\"</span>} 0\r\ngo_gc_duration_seconds{quantile=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"1\"</span>} 0\r\ngo_gc_duration_seconds_sum 0\r\ngo_gc_duration_seconds_count 0\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># HELP go_goroutines Number of goroutines that currently exist.</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># TYPE go_goroutines gauge</span>\r\ngo_goroutines 8\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># HELP go_info Information about the Go environment.</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># TYPE go_info gauge</span>\r\ngo_info{version=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"go1.15.5\"</span>} 1\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># TYPE go_memstats_alloc_bytes gauge</span>\r\n\r\n[truncated]\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As we can see we have a rather impressive list of metrics of all types: counters, gauges, and summaries.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">One of particular interest is a gauge for currently existing goroutines:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"bash hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic; margin-top: 0px;\"># HELP go_goroutines Number of goroutines that currently exist.</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># TYPE go_goroutines gauge</span>\r\ngo_goroutines 7\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Note, that it is the number of&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">existing</span>&nbsp;goroutines, but not the&nbsp;<span style=\"font-weight: bolder;\">running</span>&nbsp;ones: some of the goroutines might be in the suspended state. One of the goroutines is our&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">main</code>&nbsp;function; the rest are running helper functions from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">runtime</code>&nbsp;package, and are responsible for tasks such as garbage collection. Later we see how we can use this metric to reveal potential memory leaks.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">At the end very end, we see a familiar metric for the received HTTP request with label&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">code</code>.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs apache\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-attribute\" style=\"color: rgb(80, 161, 79); margin-top: 0px;\">promhttp_metric_handler_requests_total</span>{code=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"200\"</span>} <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>\r\n<span class=\"hljs-attribute\" style=\"color: rgb(80, 161, 79);\">promhttp_metric_handler_requests_total</span>{code=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"500\"</span>} <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>\r\n<span class=\"hljs-attribute\" style=\"color: rgb(80, 161, 79);\">promhttp_metric_handler_requests_total</span>{code=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"503\"</span>} <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">At the next curl request, the metric will be increased by one.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now, this is already looking promising, but how can we instrument&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">our own</span>&nbsp;code? Let\'s add a simple metric for the processed orders; as this number can only increase, the counter type is a natural choice.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"go hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">package</span> main\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> (\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"net/http\"</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"time\"</span>\r\n\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"github.com/prometheus/client_golang/prometheus\"</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"github.com/prometheus/client_golang/prometheus/promauto\"</span>\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"github.com/prometheus/client_golang/prometheus/promhttp\"</span>\r\n)\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">var</span> counter = promauto.NewCounter(prometheus.CounterOpts{\r\n    Name: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"orders_processed\"</span>,\r\n})\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">func</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">main</span><span class=\"hljs-params\">()</span></span> {\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">func</span><span class=\"hljs-params\">()</span></span> {\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> {\r\n            counter.Inc()\r\n            <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// simulate some processing function</span>\r\n            time.Sleep(time.Second)\r\n        }\r\n    }()\r\n\r\n    http.Handle(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"/metrics\"</span>, promhttp.Handler())\r\n    http.ListenAndServe(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\":2112\"</span>, <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">nil</span>)\r\n}\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">prometheus</code>&nbsp;package provides metrics data types, and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">promauto</code>&nbsp;package automates some routine tasks, such as metric registration.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now, we can see how well our processing goes:</p><blockquote style=\"padding: 12px 24px; background-image: initial; background-position: 0px 0px; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-left: 4px solid rgb(84, 142, 170); margin-top: 32px; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">http localhost:2112/metrics | grep orders_processed</p></blockquote><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"bash hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic; margin-top: 0px;\"># HELP orders_processed</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># TYPE orders_processed counter</span>\r\norders_processed 7\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If we issue the request again we can verify that the processing is up and running:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"bash hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic; margin-top: 0px;\"># HELP orders_processed</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\"># TYPE orders_processed counter</span>\r\norders_processed 10\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If you have a feeling that these values are not that illuminating, then you are on the right track.&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">Prometheus is a statistical instrument</span>&nbsp;at its core: it is intended to work with the trends, and not with the individual results. Later we see how to get some insights with&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">rate</code>&nbsp;and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">increase</code>&nbsp;functions.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now, we have already instrumented our application&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">and have not yet run Prometheus itself.</span>&nbsp;Why do we need one? A Prometheus server allows us to aggregate data from several instances of our application. It scrapes our application and collects the values of metrics. Here is a simple Prometheus configuration:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"json hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">scrape_configs:\r\n  - job_name: myapp\r\n    scrape_interval: <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1); margin-top: 0px;\">10</span>s\r\n    static_configs:\r\n      - targets:\r\n          - <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">127.0</span><span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">.0</span><span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">.1</span>:<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">2112</span>\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Prometheus server will scrape our application on port 2112 every 10 seconds and collects the metrics. Let\'s bind this configuration to a docker container and run a Prometheus server:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"bash hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">docker run \\\r\n    --network <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79); margin-top: 0px;\">\"host\"</span> \\\r\n    -p 9090:9090 \\\r\n    -v <span class=\"hljs-variable\" style=\"color: rgb(152, 104, 1);\">$HOME</span>/GolandProjects/go-learn/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \\\r\n    prom/prometheus\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Note, that we have to enable networking in&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">host</code>&nbsp;mode: our docker container needs to access&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">metric</code>&nbsp;endpoint in our application which is outside of the docker network.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now we can access Prometheus UI on&nbsp;<a href=\"http://localhost:9090/\" rel=\"noopener noreferrer nofollow\" style=\"color: rgb(84, 142, 170); text-decoration: none; margin-top: 0px;\">localhost:9090</a>. Here we can see that we are successfully scraping metrics from our application.</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/d0a/3bf/e58/d0a3bfe582da4f798e6a0ea8601221a9.png\" width=\"1453\" height=\"459\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">How many goroutines do we have? In a table view we see the last recorded value:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/b45/8fd/d34/b458fdd34576521cb00bdfede6a07c72.png\" width=\"933\" height=\"349\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">And in a table view we can see the trend:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/f47/967/c98/f47967c98ebb48710a3091cb8690b6c3.png\" width=\"942\" height=\"831\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The result of this query (<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">go_goroutines</code>) is an instant vector that contains a single time series. What will be the result for the same query when we run a second instance of our application? Then&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">instance</code>&nbsp;label will have two possible values for two instances, therefore we get two time series. And as noted above we still have an instant vector, not a range vector.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s add one more target to our configuration and start the second instance of our application at port&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">21112</code>.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"json hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">scrape_configs:\r\n  - job_name: myapp\r\n    scrape_interval: <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1); margin-top: 0px;\">10</span>s\r\n    static_configs:\r\n      - targets:\r\n          - <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">127.0</span><span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">.0</span><span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">.1</span>:<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">2112</span>\r\n          - <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">127.0</span><span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">.0</span><span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">.1</span>:<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">21112</span>\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Here we can see the number of goroutines for both our instances.</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/e3f/819/d8c/e3f819d8c4a475d88bfcadf878b90789.png\" width=\"925\" height=\"817\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If we provide a time range we get a range vector:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/6e6/a34/dba/6e6a34dba183d4aedd110730d73497bc.png\" width=\"1723\" height=\"507\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">In this case, we requested a&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">range</span>&nbsp;of values between two timestamps: now and five minutes in the past with a step equal to 1 minute. In the output, symbol&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">@</code>separates a value of a metric from its timestamp.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Neither&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">Prometheus</code>&nbsp;no&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">Grafana</code>&nbsp;can picture the graph for a range vector. However, all function that takes a range vector as input returns an instant vector which in turn can be pictured.</p><h2 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Prometheus Functions and Modifiers</h2><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The two most useful range functions are&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">increase</code>&nbsp;and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">rate;</code>&nbsp;both of them should be used only with counters. Let\'s have a look at our&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">orders_processed</code>&nbsp;metric.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Prometheus is happy to tell us that one of the instances has processed ~7000 orders so far.</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/85c/67e/3f3/85c67e3f392f27ae56917ed44f38a5d0.png\" width=\"936\" height=\"320\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">What insights can we get from this number? Actually, not that much. For example, it would be more interesting to know how many orders did we processed recently. Here we calculate the increase in the number of processed orders during the last 5 minutes.</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/6d7/c95/733/6d7c95733b6ef90273ff2bdce5de941e.png\" width=\"939\" height=\"328\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">This number could shed some light on the health of our application if we knew how many orders we expected to process under normal conditions. Let\'s compare it with some reference point in the past: let\'s imagine that we just deployed a nightly build of our application, and two hours ago we were running a thoroughly tested stable version.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Modifier&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">offset</code>changes the time offset for the vector in the query:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/fb5/ce0/867/fb5ce08670a34f50d067f6ed5abf4ffd.png\" width=\"934\" height=\"359\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Currently, we have roughly the same increase in the number of orders as 2 hours ago: therefore, we can&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">assume</span>&nbsp;that our new build didn\'t break anything (yet).</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">What is our current rate of order processing?</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/0b9/c13/f61/0b9c13f61a4a32515ad54d6d158f32ef.png\" width=\"935\" height=\"255\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We processed 197 orders during the last 5 minutes, therefore the per-second average rate of increase is calculated as&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">197 orders / 5 * 60 seconds</code>&nbsp;and is equal to ~0.7 orders per second. Prometheus has in-build function&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">rate</code>&nbsp;for this purpose:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/5f9/4f3/e1c/5f94f3e1cbbccae5dc437047d044cd05.png\" width=\"934\" height=\"246\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As you can see from the graphs&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">rate</code>&nbsp;and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">increase</code>&nbsp;are basically reveals the same pattern.</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/07f/d95/4ae/07fd954aef83b38080fed4cb09d3ba2e.png\" width=\"923\" height=\"731\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/caa/d0e/cde/caad0ecde82ac792d65be352935d6cbc.png\" width=\"918\" height=\"725\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now, how can we calculate the total rate of order processing for all instances of the application? We need to sum the rates of all instances:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/67a/554/a64/67a554a64f40b41cba9c6f1a9019922f.png\" width=\"918\" height=\"306\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">However, if we try to sum rates of different instances we get&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">Empty query result</code>. This happens because before the application of a binary operation Prometheus selects time series that have exactly the same set of labels from the left and right operands. In our case, Prometheus didn\'t find matching time series due to the difference in&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">instance</code>&nbsp;label.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We can use&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">on</code>&nbsp;keyword to specify that we only want to match by&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">job</code>&nbsp;label (and effectively ignore the difference in&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">instance</code>&nbsp;label)</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/6bd/c67/c0f/6bdc67c0fcacdbec9d4a9b1d0b8f5231.png\" width=\"934\" height=\"252\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Or we can use&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">ignoring</code>&nbsp;keyword to explicitly ignore&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">instance</code>&nbsp;label:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/48a/5f0/f7f/48a5f0f7fd810664deaaac3aca9ed4cc.png\" width=\"908\" height=\"284\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">What happens if we have ten instances of our application instead of two? Especially, taking into consideration that Kubernetes is free to kill any instance at any time, and spin up a new one. Prometheus offers aggregate functions that relieve us from the manual bookkeeping:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/e98/052/112/e98052112e5aa8b339f952d1e144cee3.png\" width=\"930\" height=\"688\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Note, that we applied aggregate operaion&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">sum</code>&nbsp;to&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">rate</code>&nbsp;function and not vise versa. We always take&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">rate</code>&nbsp;first and then apply the aggregation; otherwise,&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">rate</code>&nbsp;cannot detect counters restarts when the application restarts. As&nbsp;<a href=\"https://www.robustperception.io/rate-then-sum-never-sum-then-rate\" rel=\"noopener noreferrer nofollow\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">Robust Perception Blog</a>&nbsp;puts it:</p><blockquote style=\"padding: 12px 24px; background-image: initial; background-position: 0px 0px; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border-left: 4px solid rgb(84, 142, 170); margin-top: 32px; margin-bottom: 0px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">The only mathematical operations you can safely directly apply to a counter\'s values are rate, irate, increase, and resets. Anything else will cause you problems.</p></blockquote><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">orders_processed</code>&nbsp;is a rather generic metric; it could possibly have another label&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">application</code>&nbsp;that partitions it by different applications. In this case query&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">sum(rate(orders_processed[5m]))</code>&nbsp;returns the total rate for all applications which would be rather useless. We calculate the rate per application by using&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">by</code>&nbsp;keyword:&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">sum by (application) (rate(orders_processed[5m]))</code>.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We can check a potential memory leak by comparing the current total number of goroutines for the application with the total number of goroutines recorded an hour ago:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs lisp\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">sum(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">rate</span>(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">go_goroutines</span>[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>m] offset <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>h)) / \r\nsum(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">rate</span>(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">go_goroutines</span>[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>m]))\r\n</code></pre><h2 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">SLO-related queries</h2><h3 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 22px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">API Errors Rate</h3><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s say we have counter&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">http_requests_total</code>&nbsp;that tracks the number of the received requests and has label&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">status_code</code>.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We can determine the rate for the failed requests due to server errors:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs lisp\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">rate(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">http_requests_total</span>{status_code=~<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"5.*\"</span>}[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>m])\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We calculate the error ratio by dividing the rate of failed request on the total rate:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs lisp\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">sum(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">rate</span>(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">http_requests_total</span>{status_code=~<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"5.*\"</span>}[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>m]) \r\n/ sum(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">rate</span>(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">http_requests_total</span>[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>m])\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Finally, we can check whether the proportion of failed API requests is larger than 10%</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs lisp\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">sum(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">rate</span>(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">http_requests_total</span>{status_code=~<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"5.*\"</span>}[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>m])) /\r\n    sum(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">rate</span>(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">http_requests_total</span>[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>m]))\r\n    &gt; <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0.1</span>\r\n</code></pre><h3 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 22px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Request Latency</h3><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Another metric&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">response_latency_ms</code>&nbsp;tracks the latency of the API responses in ms. We can check whether 95% of the responses take less or equal than 5 seconds.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs lisp\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">histogram_quantile(\r\n    <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1); margin-top: 0px;\">0.95</span>, \r\n    sum(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">rate</span>(<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">request_latency_ms_bucket</span>[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>m])) by (<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">le</span>)\r\n) / <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1e3</span> &gt; <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>\r\n</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">le</code>&nbsp;(less or equal) - is a required label that denotes an inclusive upper limit for the bucket, in our case 0.95-quantile. We divide the query result by&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">1e3</code>&nbsp;(1000) to convert from milliseconds to seconds.</p><h2 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Conclusion</h2><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As we can Prometheus is a powerful and flexible tool. This article covers its usage from basic instrumentation of a Go application to SLO-related PromQl queries.</p>', 'Published', '2021-01-29 13:08:28', NULL);
INSERT INTO `post` (`id`, `title`, `content`, `status`, `created_at`, `updated_at`) VALUES
(60, 'Algorithms in Go: Merge Intervals', '<p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">This is the third part of a series covering the implementation of algorithms in Go. In this article, we discuss the Merge Intervals algorithm. Usually, when you start learning algorithms you have to deal with some problems like finding the least common denominator or finding the next Fibonacci number. While these are indeed important problems, it is not something that we solve every day. Actually, in the vast majority of cases, we only solve such kinds of algorithms when we learn how to solve the algorithms. What I like about the Merge Interval algorithm is that we apply it in our everyday life, usually without even noticing that we are solving an algorithmic problem.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s say that we need to organize a meeting for our team. We have three colleagues Jay, May, and Ray and their time schedule look as follows (a colored line represents an occupied timeslot):</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/ac1/2ca/b6c/ac12cab6cb49264e89d3213d96fd210a.jpg\" width=\"1469\" height=\"680\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Which timeslot should we pick up for a new meeting? One could look at the picture, find a gap in Ray\'s schedule, and check whether the others a gap there as well.</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/939/7ac/b13/9397acb13fcb9762a222329815923e21.jpg\" width=\"1469\" height=\"680\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">How can we implement this logic? Most straightforwardly, we can iterate through every minute of the day and check whether someone is having a meeting during that time. If none of the colleagues are occupied at that time, we find an available minute.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">How can we simplify this approach? Instead of checking all employees for every minute, we can merge their schedules and find the available slots in the resulting schedule.</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/d7a/7f3/ff1/d7a7f3ff1dca11ae4bae14f3aeb29df8.jpg\" width=\"1536\" height=\"650\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/842/4ef/fb1/8424effb1863d820b5384fb982c2afbc.jpg\" width=\"1652\" height=\"605\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/774/39d/d59/77439dd598a857b617764b732acc7ace.jpg\" width=\"1657\" height=\"603\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">After the merge, we can iterate through the array of the merged meetings and find the gaps.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">How can we implement the algorithm above? Let\'s create type&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">Slot</code>&nbsp;that represents a time slot in the schedule; for simplicity, we use integers to denote the start and the end of the time slot instead of&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">time.Time</code>&nbsp;type.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"go hljs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">type</span> Slot <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">struct</span> {\r\n  start <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">int</span>\r\n  end <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">int</span>\r\n}</code></pre><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">For each of the employees will have a sorted array of&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">Slots</code>&nbsp;(staring from the earliest time slot) that represent occupied time slots in their schedule. Our function will take an array of&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">Slot</code>&nbsp;arrays that represents the schedule for the whole team as an input parameter.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs cs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">[<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242); margin-top: 0px;\"></span>][]Slot{\r\n  {{<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">9</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">10</span>}},         <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// occupied time slots for John</span>\r\n  {{<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">3</span>}, {<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">5</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">6</span>}},  <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// occupied time slots for James</span>\r\n  {{<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">2</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">3</span>}, {<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">6</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">8</span>}},  <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// ...</span>\r\n  {{<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">4</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">6</span>}\r\n}</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Our function will return an array of&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">Slots</code>&nbsp;that represent the commonly available slots for each member of the team.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We merge the schedules of two employees by merging their arrays of&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">Slots</code>. How do we do the merge of two arrays? We need to iterate through both arrays and see whether we have overlapping time slots. How can we know that the slots are overlapping? In general, we have two options for overlapping intervals A and B:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/1b7/5ac/4bd/1b75ac4bdc429a0f90ffc5322598057f.jpg\" width=\"1572\" height=\"636\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/1d1/35c/eb8/1d135ceb8bc45daac9c3cfc3eccea255.jpg\" width=\"1474\" height=\"678\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If neither of the two above conditions is satisfied, then the intervals do not overlap.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We can iterate through both of the arrays and see whether we have an overlap. Let\'s&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">arr1</code>&nbsp;and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr2</code>&nbsp;represent the occupied time slots for two employees. We start with&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">i1</code>&nbsp;and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">i2</code>&nbsp;equal to zero and continue the iteration till we exhaust either of the arrays. At each step, we check whether the current intervals from each of the arrays overlap.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs go\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic; margin-top: 0px;\">// Merge two array of slots.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">func</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">Merge</span><span class=\"hljs-params\">(arr1, arr2 []Slot)</span> []<span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">Slot</span></span> {\r\n	out := <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">make</span>([]Slot, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>)\r\n	i1, i2 := <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>\r\n	<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> i1 &lt; <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">len</span>(arr1) &amp;&amp; i2 &lt; <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">len</span>(arr2) {\r\n		v1, v2 := arr1[i1], arr2[i2]</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If the intervals overlap then we merge them. Let\'s say interval&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">v1</code>&nbsp;from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr1</code>&nbsp;ends earlier than&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">v2</code>&nbsp;from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr2</code>&nbsp;In this case, the next interval from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr1</code>&nbsp;can have an overlap with the merged interval of&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">v1</code>&nbsp;and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">v2</code>. Therefore, we merge&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">v1</code>&nbsp;into&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">v2</code>, i.e.&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">v2.Start = min(v2.Start, v1.Start)</code>&nbsp;and&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">v2.Stop = max(v2.Stop, v1.Stop)</code>&nbsp;and increase&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">i1</code>.&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">i2</code>&nbsp;stays the same, therefore at the next iteration, we will check whether the next interval from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr1</code>&nbsp;overlaps with the merged interval.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs pgsql\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">overlap12 := (v2.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">Start</span> &gt;= v1.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span>) &amp;&amp; (v2.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span> &lt;= v1.Stop)\r\noverlap21 := (v1.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span> &gt;= v2.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span>) &amp;&amp; (v1.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span> &lt;= v2.Stop)\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> overlap12 || overlap21 {\r\n	merged := Slot{\r\n		<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span>: min(v1.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span>, v2.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span>),\r\n		Stop:  max(v1.Stop, v2.Stop),\r\n  }\r\n  <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> v1.Stop &lt; v2.Stop {\r\n    arr2[i2] = merged\r\n    i1++\r\n  } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span> {\r\n    arr1[i1] = merged\r\n    i2++\r\n  }\r\n  <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">continue</span>\r\n}</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If there is no overlap, we save the interval with the earliest stop (let\'s say an interval&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">v2</code>&nbsp;from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr2</code>) to the output array and increase index&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">i2</code>&nbsp;for&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr2.</code>&nbsp;The other interval&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">v1</code>&nbsp;from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr1</code>&nbsp;can still have an overlap with the next interval from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">arr2</code>&nbsp;so we don\'t increase&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">i1</code>.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs cs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">if</span> v1.Stop &lt; v2.Stop {\r\n	<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span> = append(<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span>, v1)\r\n	i1++\r\n} <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span> {\r\n	<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span> = append(<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span>, v2)\r\n	i2++\r\n}</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">When&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">i1</code>&nbsp;or&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">i2</code>&nbsp;becomes equal to the length of the corresponding array we stop the iteration. As no more overlaps are possible, we simply add the remaining intervals to the output array.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The full listing for the function:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs go\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic; margin-top: 0px;\">// Merge two arrays of meetings.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">func</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">Merge</span><span class=\"hljs-params\">(arr1, arr2 []Slot)</span> []<span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">Slot</span></span> {\r\n  out := <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">make</span>([]Slot, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>)\r\n  i1, i2 := <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>\r\n  <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> i1 &lt; <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">len</span>(arr1) &amp;&amp; i2 &lt; <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">len</span>(arr2) {\r\n    v1, v2 := arr1[i1], arr2[i2]\r\n    \r\n    overlap12 := (v2.Start &gt;= v1.Start) &amp;&amp; (v2.Start &lt;= v1.Stop)\r\n    overlap21 := (v1.Start &gt;= v2.Start) &amp;&amp; (v1.Start &lt;= v2.Stop)\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> overlap12 || overlap21 {\r\n      merged := Slot{\r\n        Start: min(v1.Start, v2.Start),\r\n        Stop:  max(v1.Stop, v2.Stop),\r\n      }\r\n      <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> v1.Stop &lt; v2.Stop {\r\n        arr2[i2] = merged\r\n        i1++\r\n      } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span> {\r\n        arr1[i1] = merged\r\n        i2++\r\n      }\r\n      <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">continue</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// no overlap; save the earliest of the intervals</span>\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> v1.Stop &lt; v2.Stop {\r\n      out = <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">append</span>(out, v1)\r\n      i1++\r\n      } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">else</span> {\r\n      out = <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">append</span>(out, v2)\r\n      i2++\r\n      }\r\n  }\r\n  \r\n  out = <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">append</span>(out, arr1[i1:]...)\r\n  out = <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">append</span>(out, arr2[i2:]...)\r\n\r\n  <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> out\r\n}</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We merged the schedules of two colleagues. We need to merge all the schedules and then find the gaps within the merged schedule. How do find the gaps? We need to invert a&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">Slot</code>&nbsp;array considering the start and the end of the working day.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs pgsql\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">// Given an <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">array</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">of</span> occupied <span class=\"hljs-type\" style=\"color: rgb(152, 104, 1);\">time</span> slots,\r\n// <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">returns</span> available <span class=\"hljs-type\" style=\"color: rgb(152, 104, 1);\">time</span> slots <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">in</span> range <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">to</span> <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">12.</span>\r\n// We consider that working day starts at <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">and</span> ends at <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">12.</span>\r\nfunc inverseSchedule(schedule []Slot) []Slot {\r\n  <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">start</span> := <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>\r\n  var <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span> []Slot\r\n  <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> ind, appointment := range schedule {\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> ind == <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span> &amp;&amp; appointment.Start == <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span> {\r\n      start = appointment.Stop\r\n      <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">continue</span>\r\n    }\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span> = append(<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span>, Slot{<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span>: <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">start</span>, Stop: appointment.<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span>})\r\n    start = appointment.Stop\r\n  }\r\n  <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">start</span> &lt; <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">12</span> {\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span> = append(<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span>, Slot{<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">Start</span>: <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">start</span>, Stop: <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">12</span>})\r\n  }\r\n  <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">out</span>\r\n}</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The resulting function looks as follows:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs go\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic; margin-top: 0px;\">// AvailableSlots for all employees.</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// Working hours starts at 1 ends at 12.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">func</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">AvailableSlots</span><span class=\"hljs-params\">(schedule [][]Slot)</span> []<span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">Slot</span></span> {\r\n	<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">len</span>(schedule) == <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span> {\r\n		<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> []Slot{{<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">12</span>}}\r\n	}\r\n	<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">len</span>(schedule) == <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span> {\r\n		<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> inverseSchedule(schedule[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>])\r\n	}\r\n	merged := Merge(schedule[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">0</span>], schedule[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">1</span>])\r\n	<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> _, s := <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">range</span> schedule[<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">2</span>:] {\r\n		merged = Merge(merged, s)\r\n	}\r\n\r\n	<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> inverseSchedule(merged)\r\n}</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Here you can find the<a href=\"https://gist.github.com/a11310b036a62716ea70f8e38f5bcf21\" rel=\"noopener noreferrer nofollow\" style=\"color: rgb(84, 142, 170); text-decoration: none; margin-top: 0px;\">&nbsp;source code</a>&nbsp;and the&nbsp;<a href=\"https://gist.github.com/c9ebf7979df346c2f54cc8d1996f10c8\" rel=\"noopener noreferrer nofollow\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">tests</a>&nbsp;for the solution.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">In the next article, we consider other solutions for the problem and compare their algorithmic complexity.</p>', 'Published', '2021-01-29 17:55:13', NULL);
INSERT INTO `post` (`id`, `title`, `content`, `status`, `created_at`, `updated_at`) VALUES
(61, 'Architectural approaches to authorization in server applications: Activity-Based Access Control Framework', '<p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">This article is about security. I’ll focus on this in the context of web applications, but I’ll also touch on other types of applications. Before I describe approaches and frameworks, I want to tell you a story.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"background\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Background</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Throughout my years working in the IT sphere, I’ve had the opportunity to work on projects in a variety of fields. Even though the process of authenticating requirements remained relatively consistent, methods of implementing the authorization mechanism tended to be quite different from project to project. Authorization had to be written practically from scratch for the specific goals of each project; we had to develop an architectural solution, then modify it with changing requirements, test it, etc. All this was considered a common process that developers could not avoid. Every time someone implemented a new architectural approach, we felt more and more that we should come up with a general approach that would cover the main authorization tasks and (most importantly) could be reused on other applications. This article takes a look at a generalized architectural approach to authorization based on an example of a developed&nbsp;<a href=\"https://github.com/exadel-inc/activity-based-security-framework\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">framework</a>.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"approaches-to-creating-a-framework\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Approaches to Creating a Framework</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As usual, before developing something new, we need to decide what problems we’re trying to solve, how the framework will help us solve them, and whether or not there is already a solution to these issues. I’ll walk you through each step, starting with identifying issues and describing our desired solution.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We’re focusing on two styles of coding: imperative and declarative. Imperative style is about&nbsp;<span style=\"font-weight: bolder;\">how</span>&nbsp;to get a result; declarative is about&nbsp;<span style=\"font-weight: bolder;\">what</span>&nbsp;you want to get as a result.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><a name=\"habracut\" style=\"background-color: rgb(255, 255, 255); color: rgb(84, 142, 170); text-decoration: none; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-weight: 400;\"></a><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The declarative style is convenient because it only requires a small amount of time and effort to achieve the desired result. For example, authorization can be done in the form of a description of the user\'s roles for accessing the resource, permissions, etc. However, the declarative style does not and cannot solve every possible problem (at least for authorization purposes). This is where the imperative style comes in handy.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The imperative style is useful in that it provides additional flexibility in implementation. For example in authorization it describes&nbsp;<span style=\"font-weight: bolder;\">how</span>&nbsp;the mechanism for assigning permissions to users will be implemented — statically or dynamically. It also describes what permissions will depend on.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">A totally general-purpose framework for solving all goals and tasks obviously will not work. We need to select an architectural framework that everyone can have in common but that also leaves the implementation of the authorization logic to the discretion of the user. This is very similar to the concept of abstraction used in the development field. There has always been a dilemma about the level of abstraction. An overly abstract framework on the one hand, is very flexible but requires a lot of additional implementation; a less abstract one is not so flexible but requires a minimum of additional implementation.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"creating-a-framework-for-authorization\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Creating a Framework for Authorization</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We decided that the framework we created should be:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ol style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">Easy to use — to save users from reading a multi-page manual, settings, etc.</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Flexible — so that it can be adapted to different goals and applications</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Reliably capable of handling errors</li></ol><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"declarative-style\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Declarative style</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Authorization can be implemented declaratively by using configuration files (for example, xml, yaml, or properties) or by using Java annotations.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We decided to use Java annotations due to the fact that:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ol style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">Java annotations are a tool of both the Java language itself and the JVM in particular, which allows you to process annotations both at runtime and at compile time.</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Annotations are easy to use because it is easy to see which resource is limited and why.</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Annotations are flexible enough in the configuration because they are part of the Java language.</li></ol><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"authorization-implementation-approaches\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Authorization Implementation Approaches</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">There are many things on which you can base your authorization:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ul style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">User roles (very convenient in applications with a small granularity of roles).</li><li style=\"padding: 9px 0px; line-height: 1.6;\">User permissions (convenient in applications with a more granular distribution of rights, i.e. when the usual set of roles is insufficient).</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">The user\'s actions — also convenient in cases of granular distribution of rights, i.e. instead of declaratively indicating what rights are needed to access the resource, the action that the user performs with the resource (for example, create, modify, delete) is indicated. The number and type of actions are only limited by your requirements and imagination. Action-based authorization is convenient because there is no need to change access rights later — the rights are declaratively described by the action, and the action with the resource usually is not changed. The rights that are necessary to perform the action can be changed, however.</li></ul><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"configuration-and-error-handling\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Configuration and Error Handling</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">This point deserves special attention. A couple of times I\'ve come across good frameworks and libraries with poor error handling, especially in terms of configuration. In this case, the lack of detailed documentation makes the framework almost completely useless.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As mentioned above, we decided to use Java annotations to implement authorization in a declarative style. Another advantage of this choice is compile-time handling of configuration errors; basically, we could check our work earlier in the process. Java provides an annotation processing mechanism that allows applications to process annotations at compile time.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Here we can also cite the Java Module System which was developed by Oracle and came out along with JDK 9. One of its most important advantages is also error handling at compile time.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"level-of-abstraction\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Level of Abstraction</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The framework’s approach to abstraction is:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ul style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">Resources which require authorization are classified. This can be an organization, a project, a subproject — any entity.</li><li style=\"padding: 9px 0px; line-height: 1.6;\">The developer creates actions for each type of resource.</li><li style=\"padding: 9px 0px; line-height: 1.6;\">A custom annotation is created for each type of resource; the annotation indicates the action(s) performed on the resource.</li><li style=\"padding: 9px 0px; line-height: 1.6;\">The application developer creates an action handler (validator) for each type of resource (or for all of them at once).</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">We bind user roles and/or user permissions to actions. This remains a task for the application developer, and it can be done in a variety of ways. This is what provides sufficient flexibility for our purposes.</li></ul><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"easy-abac-framework\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Easy-ABAC Framework</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The Easy-ABAC Framework takes into account all of the considerations and approaches we’ve discussed so far.<br>Let\'s look at this framework in a simple Spring Boot project.<br>First, let\'s add a dependency to the project (we will use maven):</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"xml hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">dependency</span>&gt;</span>\r\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">groupId</span>&gt;</span>com.exadel.security<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">groupId</span>&gt;</span>\r\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">artifactId</span>&gt;</span>easy-abac<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">artifactId</span>&gt;</span>\r\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">version</span>&gt;</span>1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">version</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73);\">dependency</span>&gt;</span></code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">At the time of this article’s publication, the latest version is 1.1.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Adding the configuration is necessary to plug in the aspects of the framework:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@SpringBootApplication</span>\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Import(AbacConfiguration.class)</span>\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">class</span> <span class=\"hljs-title\" style=\"color: rgb(193, 132, 1);\">Application</span> </span>{\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">static</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">void</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s assume we have a Project resource to which we want to restrict access. Let\'s create the necessary skeleton as described in the [documentation] (<a href=\"https://github.com/exadel-inc/activity-based-security-framework\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">https://github.com/exadel-inc/activity-based-security-framework</a>).</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"1-description-of-required-actions\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">1. Description of required actions</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s assume we have the following user roles in our application:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ul style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">Admin</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Developer</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Project owner</li></ul><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s define possible actions with the project:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ul style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">View</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Edit</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Close</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Delete</li></ul><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Note that the actions can be very different; you can edit only open projects, view only your projects, etc. The number and type of actions are only constrained by the requirements for authorization in the application.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s describe it in terms of the framework:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.exadel.easyabac.model.core.Action;\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">enum</span> ProjectAction implements Action {\r\n    VIEW,\r\n    UPDATE,\r\n    CLOSE,\r\n    DELETE\r\n}</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Only one thing is required here: the implementation of the com.exadel.easyabac.model.core. action marker interface. Everything else in the&nbsp;<em>enum</em>&nbsp;is at the discretion of the developer.<br>I’ll note right away that it is through this&nbsp;<em>enum</em>&nbsp;that it is convenient to bind to the user\'s role and/or user permissions either statically or dynamically</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"2-creating-annotations-for-managing-access-control\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">2. Creating Annotations for Managing Access Control</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s create an annotation-identifier for the project:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Retention(RetentionPolicy.RUNTIME)</span>\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Target(ElementType.PARAMETER)</span>\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@interface</span> ProjectId {\r\n}</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We’ll need it to determine the project identifier among the method parameters.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s create an annotation to control access to projects:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.exadel.easyabac.model.annotation.Access;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.exadel.easyabac.model.validation.EntityAccessValidator;\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> java.lang.annotation.ElementType;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> java.lang.annotation.Retention;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> java.lang.annotation.RetentionPolicy;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> java.lang.annotation.Target;\r\n\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Retention(RetentionPolicy.RUNTIME)</span>\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Target({ElementType.METHOD, ElementType.TYPE})</span>\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Access(identifier = ProjectId.class)</span>\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@interface</span> ProjectAccess {\r\n\r\n    ProjectAction[] actions();\r\n\r\n    Class&lt;? extends EntityAccessValidator&gt; validator();\r\n}</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The annotation must contain&nbsp;<em>actions</em>&nbsp;and&nbsp;<em>validator</em>&nbsp;methods, otherwise we will get compilation errors:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">Error:(<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">13</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">9</span>) java: value() method is missing <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@com</span>.example.abac.model.ProjectAccess\r\nError:(<span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">13</span>, <span class=\"hljs-number\" style=\"color: rgb(152, 104, 1);\">9</span>) java: validator() method is missing <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@com</span>.example.abac.model.ProjectAccess</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">You should also pay attention to&nbsp;<em><a href=\"https://habr.com/ru/users/target/\" class=\"user_link\" style=\"color: rgb(84, 142, 170); text-decoration: none; display: inline-block; position: relative; white-space: nowrap;\">Target</a></em>:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Target({ElementType.METHOD, ElementType.TYPE})</span></code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Annotation can be used either on a method level or on a type-level. In a type level case, the annotation is applied to all instance methods of a given type.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"3-creating-a-validator-for-checking-access-rights\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">3. Creating a Validator for Checking Access Rights</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">All we have to do now is add a validator:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.exadel.easyabac.model.validation.EntityAccessValidator;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.exadel.easyabac.model.validation.ExecutionContext;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.example.abac.model.ProjectAction;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> org.springframework.stereotype.Component;\r\n\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Component</span>\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">class</span> <span class=\"hljs-title\" style=\"color: rgb(193, 132, 1);\">ProjectValidator</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">implements</span> <span class=\"hljs-title\" style=\"color: rgb(193, 132, 1);\">EntityAccessValidator</span>&lt;<span class=\"hljs-title\" style=\"color: rgb(193, 132, 1);\">ProjectAction</span>&gt; </span>{\r\n\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Override</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">void</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">validate</span><span class=\"hljs-params\">(ExecutionContext&lt;ProjectAction&gt; context)</span> </span>{\r\n        <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// here get current user actions</span>\r\n        <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// and compare them with context.getRequiredActions()</span>\r\n    }\r\n}</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The validator can be made either the default (so that it is not explicitly indicated in the annotation every time):</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Retention(RetentionPolicy.RUNTIME)</span>\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Target({ElementType.METHOD, ElementType.TYPE})</span>\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@Access(identifier = ProjectId.class)</span>\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@interface</span> ProjectAccess {\r\n\r\n    ProjectAction[] value();\r\n\r\n    Class&lt;? extends EntityAccessValidator&gt; validator() <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> ProjectValidator.class;\r\n}</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">or specified explicitly in each annotation:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectAccess(value = ProjectAction.VIEW, validator = ProjectValidator.class)</span></code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"4-access-restriction\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">4. Access Restriction</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now the only step left in restricting access to the resources is to place out annotations:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.exadel.easyabac.model.annotation.ProtectedResource;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.example.abac.Project;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.example.abac.model.ProjectAccess;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.example.abac.model.ProjectAction;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> com.example.abac.model.ProjectId;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> org.springframework.web.bind.annotation.*;\r\n\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@RestController</span>\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProtectedResource</span>\r\n<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@RequestMapping(\"/project/{projectId}\")</span>\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">class</span> <span class=\"hljs-title\" style=\"color: rgb(193, 132, 1);\">ProjectController</span> </span>{\r\n\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@GetMapping</span>\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectAccess(ProjectAction.VIEW)</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> Project <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">getProject</span><span class=\"hljs-params\">(<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectId</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@PathVariable(\"projectId\")</span> Long projectId)</span> </span>{\r\n        Project project = ...; <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// get project here</span>\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> project;\r\n    }\r\n\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@PostMapping</span>\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectAccess({ProjectAction.VIEW, ProjectAction.UPDATE})</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> Project <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">updateProject</span><span class=\"hljs-params\">(<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectId</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@PathVariable(\"projectId\")</span> Long projectId)</span> </span>{\r\n        Project project = ...; <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// update project here</span>\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> project;\r\n    }\r\n\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@PostMapping(\"/close\")</span>\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectAccess(ProjectAction.CLOSE)</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> Project <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">updateProject</span><span class=\"hljs-params\">(<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectId</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@PathVariable(\"projectId\")</span> Long projectId)</span> </span>{\r\n        Project project = ...; <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// close project here</span>\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> project;\r\n    }\r\n\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@DeleteMapping</span>\r\n    <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectAccess(ProjectAction.DELETE)</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> Project <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">updateProject</span><span class=\"hljs-params\">(<span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@ProjectId</span> <span class=\"hljs-meta\" style=\"color: rgb(64, 120, 242);\">@PathVariable(\"projectId\")</span> Long projectId)</span> </span>{\r\n        Project project = ...; <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// delete project here</span>\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> project;\r\n    }\r\n}\r\n</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The&nbsp;<em>@ProtectedResource</em>&nbsp;annotation is used to designate resources for which authorization is needed, in this case, all&nbsp;<em>instance</em>&nbsp;methods of the class must contain at least one&nbsp;<em>@Access-based</em>&nbsp;annotation. If this requirement is not met, there will be compilation errors.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The&nbsp;<em>@PublicResource</em>&nbsp;annotation, on the other hand, is used to indicate a method that does not require an authorization in the case when the class containing the method is marked as&nbsp;<em>@ProtectedResource</em>.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">So now we’ve finished configuration! Be careful to note that the annotation doesn’t necessarily have to be placed on a controller; it can be placed on any class.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h3 id=\"5-validator-implementation\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 20px; line-height: 28px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">5. Validator Implementation</h3><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let\'s take a closer look at how this works. The framework provides a skeleton for building an authorization architecture in an application. It is up to the user to write the authorization logic. We did this to allow for the fact that application processing can be done in many different ways.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Permissions checking is done in a validator that must implement the interface&nbsp;<em>EntityAccessValidator</em>, specifically the&nbsp;<em>validate</em>&nbsp;method:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(34, 34, 34);\"><code class=\"java hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\"><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">public</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">void</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">validate</span><span class=\"hljs-params\">(ExecutionContext&lt;Action&gt; context)</span></span>;</code></pre><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><em>ExecutionContext</em>&nbsp;contains the necessary information about the required access rights to the resource and meta-information about the context of the call:&nbsp;<em>context.getRequiredActions()</em>&nbsp;will return a list of&nbsp;<em>Action</em>s that the user must have.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Next, you need to get a list of&nbsp;<em>Action</em>s available to the currently logged-in user (figuring out exactly how to do this is a responsibility for the application developer).&nbsp;<em>Action(s)</em>&nbsp;can be bound to the user in various ways: statically bound to the user\'s role, dynamically through the database, etc.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As a result, we have 2&nbsp;<em>Actions</em>&nbsp;lists (current and required), but we still have to compare them. If at least one&nbsp;<em>Action</em>&nbsp;is missing, the user cannot be authorized. You can create your own&nbsp;<em>exception</em>&nbsp;like an&nbsp;<em>AccessDeniedException</em>, and once you’ve processed it in&nbsp;<em>ExceptionHandler</em>, you can return HTTP status 403 (this is at the discretion of the application developer).</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">An example of the validator implementation can be viewed&nbsp;<a href=\"https://github.com/exadel-inc/activity-based-security-framework/blob/master/easy-abac-demo/src/main/java/com/exadel/easyabac/demo/security/validator/DemoValidator.java\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">here</a>.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/webt/7p/2s/yl/7p2sylynr6t29qhaeohu71mszqq.png\" style=\"border-style: none; margin: 0px; max-width: 100%; height: auto;\"><br>Framework sequence diagram</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"comparative-analysis\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Comparative Analysis</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Of course, before we wrote something new, we made sure that the same solution didn’t already exist. We also considered similar solutions and determined whether or not they were suitable for our purposes.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We considered Apache Shiro, JAAS, and Spring Security. Apache Shiro and JAAS do not provide sufficient flexibility, and they don’t have a very convenient configuration interface. JAAS does not use a declarative style at all, and Apache Shiro only has one through a configuration file. Undoubtedly, these frameworks are convenient for solving some problems, but they didn’t fit the bill for ours.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Spring Security is a powerful mechanism and is also very flexible (as a framework of this level should be). It uses a declarative style for authorization, but does not have a built-in mechanism for checking the configuration during compile time. The configuration via annotations process for complex authorizations is rather cumbersome. The flexibility that Spring has requires additional costs to implement the required mechanism.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">That’s why we developed Easy-ABAC Framework the way we did; it fills in the gaps from and complements other frameworks.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"further-framework-development\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Further Framework Development</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The framework we developed currently includes a basic authorization mechanism and is quite flexible. We took into consideration the need for built-in implementation of out-of-the-box validators. At the moment, the framework can only be used in Spring-based applications. We hope to expand this in the future, as well as develop a more convenient and flexible configuration.</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"areas-of-use\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Areas of Use</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ol style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">Java applications with granular authorizations</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Multi-tenant applications</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Applications with dynamic access rights</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Spring-based applications</li></ol><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"conclusion\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Conclusion</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The article discusses architectural approaches to authorization, presented by Easy-ABAC Framework.<br>Among the advantages of the developed framework are:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ol style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">Declarative authorization style</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Handling configuration errors at compile time</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Simple and straightforward configuration</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Flexibility</li></ol><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><h2 id=\"conclusion-1\" style=\"-webkit-font-smoothing: antialiased; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; font-size: 24px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(34, 34, 34);\">Conclusion</h2><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Today we’ve shown why new frameworks are sometimes necessary in order to meet your project needs. We’ve also demonstrated the pros and cons of a variety of these frameworks and introduced you to our new one: the Easy-ABAC framework, which provides:</p><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><ol style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\">Declarative authorization style</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Handling configuration errors at compile time</li><li style=\"padding: 9px 0px; line-height: 1.6;\">Simple and straightforward configuration</li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\">Flexibility</li></ol><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><br style=\"color: rgb(34, 34, 34);\"></p><p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If you have any further questions about how the Easy-ABAC framework could work for you, please&nbsp;<a href=\"https://github.com/exadel-inc/activity-based-security-framework#contacts\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">contact us</a>.</p>', 'Published', '2021-01-29 17:56:03', NULL);
INSERT INTO `post` (`id`, `title`, `content`, `status`, `created_at`, `updated_at`) VALUES
(62, 'Creating Node.JS web server application with Express, Typescript, Jest, Swagger, log4js and routing-controllers', '<p style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">This is a step by step instruction for creating Node.JS web server application with typescript and express. Creating of new web application on Node.JS is is not making often, so the steps how to do it can be forgotten. So this article is a kind of reminder for me and other developers. Also I added in article links to video clips for more clarification. Here I show how to create application on Node.JS without using any frameworks for it. Just Node.JS and packages.<br><a name=\"habracut\" style=\"background-color: rgb(255, 255, 255); color: rgb(84, 142, 170); text-decoration: none; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif; font-weight: 400;\"></a><br>So, step by step:<br><br></p><ol style=\"margin-right: 0px; margin-bottom: 0px; margin-left: 34px; padding: 0px; color: rgb(34, 34, 34); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"padding: 0px 0px 9px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Simple Web application&nbsp;</span><a href=\"https://youtu.be/7MIIcFDeSg4\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/7MIIcFDeSg4</a><br><br>Install in right order Node.JS, packages and configure them.<br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">1) node.js download, \r\n2) Create directory for your project, \r\n3) npm init, \r\n4) in package.json\r\n \"main\": \"dist/index.js\",\r\n  \"scripts\": {\r\n    \"build\": \"tsc\",\r\n    \"start\": \"node .\"\r\n  }\r\n5) npm install --save-dev typescript, \r\n6) in tsconfig.json \r\n  {\r\n  \"compilerOptions\": {\r\n    \"esModuleInterop\": true,\r\n    \"outDir\": \"dist\",\r\n    \"baseUrl\": \".\"\r\n  }\r\n}\r\n8) npm install express, \r\n9) npm install @types/express, \r\n10) create src folder, \r\n11) create src/index.ts with code below:\r\nimport express from \'express\'\r\n\r\nconst app = express();\r\nconst port = 5000;\r\napp.get(\'/\', (request, response) =&gt; {\r\n  response.send(\'Hello world!\');\r\n});\r\napp.listen(port, () =&gt; console.log(`Running on port ${port}`));\r\n13) npm run build, \r\n14) npm run start, \r\n15) localhost:5000\r\n</code></pre><br></li><li style=\"padding: 9px 0px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Debug and initialization in Node.js&nbsp;</span><a href=\"https://youtu.be/hfST0e1ITGw\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/hfST0e1ITGw</a><br><br>Set up debug mode and create an .env file to set input values.<br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">1) in tsconfig.json add: \"sourceMap\": true\r\n2) int package.json add: \"prestart\": \"npm run build\",\r\n3) In IntelliJ IDEA in Run/Debug Configurations choose: \"npm\" and add script\r\n4) npm i ts-node-dev --save-dev\r\n5) int package.json add: \"server:watch\": \"ts-node-dev --respawn --transpile-only src/index.ts\"\r\n6) add IntelliJ IDEA npm for \"server:watch\" script\r\n7) npm install dotenv\r\n8) in index.ts add: dotenv.config();\r\n9) create .env file in root dir of your project and add text below in .env file:\r\nPORT = 5000\r\nconst port = process.env.PORT;\r\n</code></pre><br></li><li style=\"padding: 9px 0px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Adding log4js and eslint to Node.JS application&nbsp;</span><a href=\"https://youtu.be/qcSpd6N7ZJ8\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/qcSpd6N7ZJ8</a><br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">1) npm install log4js\r\n2) in index.ts file:\r\n    import log4js from \'log4js\';\r\n    ...\r\n    const logger = log4js.getLogger();\r\n    logger.level = process.env.LOG_LEVEL;\r\n    ...\r\n4) in .env file: LOG_LEVEL=error\r\n5) in index.ts file:\r\n    ...\r\n    logger.info(\'log4js log info\');\r\n    logger.debug(\'log4js log debug\');\r\n    logger.error(\'log4js log error\');\r\n    ...\r\n6) npm install eslint --save-dev\r\n7) eslint --init\r\n8) \"prebuild\": \"npm run lint\"\r\n9) \"lint:fix\": \"eslint --cache --ext .ts . --fix\",\r\n10) \"lint\": \"eslint --cache --ext .ts .\",\r\n    !!! --cache (only changed), .\r\n11) IntelliJ IDEA -- file -- setting -- eslint -- automatic\r\n12) \"rules\": {\r\n        \"semi\": [\"error\", \"always\"]\r\n    }\r\n</code></pre><br></li><li style=\"padding: 9px 0px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Routing controllers for Node.js&nbsp;</span><a href=\"https://youtu.be/_7z5Zubsdps\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/_7z5Zubsdps</a><br><br>Use routing-controllers for more convenient work.<br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">1) npm install routing-controllers\r\n2) npm install reflect-metadata\r\n3) npm install express body-parser multer\r\n4) npm install class-transformer class-validator\r\n5) tsconfig.json\r\n   \"compilerOptions\": {\r\n      ...\r\n      \"emitDecoratorMetadata\": true,\r\n      \"experimentalDecorators\": true\r\n      ...\r\n   }\r\n6) in index.ts\r\n// const app = express();\r\n\r\n// logger.info(\'log4js log info\');\r\n// logger.debug(\'log4js log debug\');\r\n// logger.error(\'log4js log error\');\r\n\r\n// app.get(\'/\', (request, response) =&gt; {\r\n//   response.send(\'Hello world2!\');\r\n// });\r\n7) in index.ts\r\n   import { createExpressServer } from \'routing-controllers\';\r\n   import { UserController } from \'./UserController\';\r\n\r\n   const app = createExpressServer({\r\n     controllers: [UserController], // we specify controllers we want to use\r\n});\r\n\r\n8) controller/user-controller.ts\r\n   import { Controller, Get, Param } from \'routing-controllers\';\r\n   import \'reflect-metadata\';\r\n\r\n   @Controller()\r\n   export class UserController {\r\n     @Get(\'/users/:id\')\r\n     getOne (@Param(\'id\') id: number) {\r\n       return \'This action returns user #\' + id;\r\n     }\r\n   }\r\n9) http://localhost:3001/users/1\r\n</code></pre><br></li><li style=\"padding: 9px 0px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Node.JS middleware, interceptor, http context&nbsp;</span><a href=\"https://youtu.be/iWUMUa7gTTQ\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/iWUMUa7gTTQ</a><br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">1) middleware -- middleware.ts\r\n2) middleware.ts\r\nexport function loggingBefore (request: any, response: any, next?: (err?: any) =&gt; any): any {\r\n  console.log(\'do something Before...\');\r\n  next();\r\n}\r\n\r\nexport function loggingAfter (request: any, response: any, next?: (err?: any) =&gt; any): any {\r\n  console.log(\'do something After...\');\r\n  next();\r\n}\r\n3) user-controller.ts in class\r\n@UseBefore(loggingBefore)\r\n@UseAfter(loggingAfter)\r\nconsole.log(\'do something in GET function...\');\r\n4) user-controller.ts in function\r\n @UseBefore(loggingBefore)\r\n @UseAfter(loggingAfter)\r\n5) user-controller.ts in function\r\n @UseInterceptor(function (action: Action, content: any) {\r\n    console.log(\'change response...\');\r\n    return content;\r\n  })\r\n6) npm install express-http-context\r\n7) index.ts\r\n \r\n const app: Express = express();\r\n        app.use(bodyParser.json());\r\n app.use(httpContext.middleware);\r\n useExpressServer(app, {\r\n   controllers: [UserController]\r\n });\r\n\r\n app.use((req, res, next) =&gt; {\r\n   httpContext.ns.bindEmitter(req);\r\n   httpContext.ns.bindEmitter(res);\r\n });\r\n\r\n8) middleware.ts loggingBefore\r\n    import httpContext from \'express-http-context\';\r\n    \r\n    console.log(\'set traceId = 123\');\r\n    httpContext.set(\'traceId\', 123);\r\n9) middleware.ts loggingAfter\r\n    console.log(`tracedId = ${httpContext.get(\'traceId\')}`);\r\n</code></pre><br></li><li style=\"padding: 9px 0px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Adding POST request to Node.JS web application, validation of input data, global error handler&nbsp;</span><a href=\"https://youtu.be/onBVkkLEuw4\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/onBVkkLEuw4</a><br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">1) in user-controller.ts add:\r\n  ...\r\n  @Post(\'/users/:id\')\r\n  @OnUndefined(204)\r\n  postOne (@Param(\'id\') id: number, @Body() info: any) {\r\n    console.log(JSON.stringify(info));\r\n  }\r\n  ...\r\n2) in postman\r\n http://localhost:3001/users/1\r\n {\r\n \"country\":\"Russia\",\r\n \"city\":\"SPb\"\r\n }\r\n3) model -- info.ts\r\n4) \r\nimport { IsDefined } from \'class-validator\';\r\n\r\nexport class Info {\r\n  @IsDefined()\r\n  country: string;\r\n  @IsDefined()\r\n  city: string;\r\n}\r\n8) postOne (@Param(\'id\') id: number, @Body() info: Info) {\r\n9) middleware -- global-error-handler.ts\r\n10) \r\nimport { ExpressErrorMiddlewareInterface, Middleware } from \'routing-controllers\';\r\n\r\n@Middleware({ type: \'after\' })\r\nexport class GlobalErrorHandler implements ExpressErrorMiddlewareInterface {\r\n  error (error: any, request: any, response: any, next: () =&gt; any) {\r\n    response.send({ ERROR: error });\r\n    next();\r\n  }\r\n}\r\n11) \r\nuseExpressServer(app, {\r\n  controllers: [UserController], // we specify controllers we want to use\r\n  middlewares: [GlobalErrorHandler],\r\n  defaultErrorHandler: false\r\n});\r\n</code></pre><br></li><li style=\"padding: 9px 0px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Swagger documentation in Node.JS web application&nbsp;</span><a href=\"https://youtu.be/-uoIasCbsq8\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/-uoIasCbsq8</a><br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">1) npm install swagger-ui-express\r\n2) tsconfig.json -- \"resolveJsonModule\": true\r\n3) src -- swagger -- openapi.json\r\n4) index.ts\r\nimport swaggerUi from \'swagger-ui-express\';\r\nimport * as swaggerDocument from \'../src/swagger/openapi.json\';\r\n...\r\napp.use(\'/api-docs\', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\r\n5) change port to 3000\r\nin .env file set PORT=3000\r\n6) npm install cors\r\n7) npm install @types/cors\r\n8) in index.ts \r\nimport cors from \'cors\';\r\n...\r\napp.use(cors() as RequestHandler);\r\n...\r\n9) Swagger Editor (example for test project)\r\n\r\nopenapi\r\n\r\nopenapi: 3.0.1\r\ninfo:\r\n  title: test API\r\n  version: v1\r\nservers:\r\n  - url: \'http://localhost:3000\'\r\ntags:\r\n  - name: API functions\r\n    description: &gt;-\r\n      API functions of our application\r\n      \r\npaths:\r\n  /users/{id}:\r\n    get:\r\n     summary: returns simple answer from get\r\n     tags: \r\n      - API functions\r\n     parameters:\r\n       - name: id\r\n         in: path\r\n         required: true\r\n         description: simple parameter\r\n         schema:\r\n           type : string\r\n           example: \'1\'\r\n     description: parameter id just for test\r\n     responses:\r\n      \'200\': #status code\r\n       description: OK\r\n       content:\r\n            document:\r\n              schema:\r\n                type: string\r\n                example: some text\r\n    post:\r\n     summary: returns simple answer from post\r\n     tags: \r\n      - API functions\r\n     requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n               $ref: \'#/components/schemas/Info\'          \r\n            example:\r\n              country: Russia\r\n              city: Spb\r\n     parameters:\r\n       - name: id\r\n         in: path\r\n         required: true\r\n         description: simple parameter\r\n         schema:\r\n           type : string\r\n           example: \'1\'\r\n     description: parameter id just for test\r\n     responses:\r\n      \'204\': #status code\r\n       description: OK\r\ncomponents:\r\n  schemas:\r\n    Info:\r\n      type: object\r\n      properties:\r\n        country:\r\n          type: string\r\n        city:  \r\n          type: string\r\n</code></pre><br></li><li style=\"padding: 9px 0px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Adding Unit tests on Jest in Node.JS web application&nbsp;</span><a href=\"https://youtu.be/rCIRpTMVEMM\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/rCIRpTMVEMM</a><br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">0) in global-error-handler.ts\r\nresponse.status(error.statusCode || error.httpCode).json(error);\r\n    next();\r\n\r\n1) npm install --save-dev jest\r\n2) npm i -D ts-jest @types/jest\r\n3) npm i -D ts-jest\r\n4) package.json -- \r\n{\r\n...\r\nscripts {\r\n...\r\n\"test:unit\": \"jest --config=jest.config.js\",\r\n},\r\n...\r\n}\r\n5) create jest.config.js with code below:\r\n\r\nprocess.env.NODE_ENV = \'UNITTEST\';\r\nmodule.exports = {\r\n    clearMocks: true,\r\n    collectCoverage: true,\r\n    collectCoverageFrom: [\r\n        \'./src/**/*.ts\'\r\n    ],\r\n    coverageDirectory: \'&lt;\'rootDir&gt;/test/coverage\',\r\n    testEnvironment: \'node\',\r\n    testMatch: [\'**/*.test.ts\'],\r\n    preset: \'ts-jest\'\r\n};\r\n\r\n6) .eslintignore\r\n*.js\r\nnode_modules\r\ndist\r\ncoverage\r\n}\r\n7) .eslintrc.json\r\n{\r\n...\r\n\"env\": {\r\n   \"jest\": true\r\n} \r\n...\r\n} \r\n8) test -- controller -- user-controller.test.ts\r\n\r\ndescribe(\'UserController\', () =&gt; {\r\n  afterEach(() =&gt; {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  it(\'postOne\', () =&gt; {\r\n    const userController = new UserController();\r\n    const testBody = {\r\n      city: \'SPb\'\r\n    };\r\n    const res = userController.postOne(1, testBody as Info);\r\n    expect(res).toBeUndefined();\r\n  });\r\n}\r\n\r\n9) in IDEA\r\nadd script - test:unit\r\nset in environment - NODE_ENV=UNITTEST\r\n10) Simple variant of jest.config.js for IDEA:\r\nprocess.env.NODE_ENV = \'UNITTEST\';\r\nmodule.exports = {\r\n  clearMocks: true,\r\n  collectCoverage: false,\r\n  testEnvironment: \'node\',\r\n  testMatch: [\'**/*.test.ts\'],\r\n  preset: \'ts-jest\'\r\n};\r\n11) npm i -D supertest @types/supertest\r\n12) in user-controller.test.ts\r\n...\r\nlet server;\r\n...\r\nbeforeAll(async () =&gt; {\r\n    server = express();\r\n    server.use(bodyParser.json());\r\n    useExpressServer(server, {\r\n      controllers: [UserController], // we specify controllers we want to use\r\n      middlewares: [GlobalErrorHandler],\r\n      defaultErrorHandler: false\r\n    });\r\n  });\r\n...\r\nit(\'postOne with validations\', done =&gt; {\r\n    request(server)\r\n      .post(\'/users/1\')\r\n      .send({\r\n        country: \'Russia\',\r\n        city: \'SPb\'\r\n      } as Info)\r\n      .expect(204)\r\n      .end((err, res) =&gt; {\r\n        if (err) throw new Error(JSON.stringify(res.body));\r\n        done();\r\n      });\r\n  });\r\n</code></pre><br></li><li style=\"padding: 9px 0px 0px; line-height: 1.6;\"><span style=\"font-weight: bolder;\">Using Config package for Node.JS and other useful packages&nbsp;</span><a href=\"https://youtu.be/8ZCHUN-JTck\" rel=\"nofollow noopener noreferrer\" style=\"color: rgb(84, 142, 170); text-decoration: none;\">youtu.be/8ZCHUN-JTck</a><br><br>Config package allows to set value for constants depending on NODE_ENV value.<br><br><pre style=\"font-family: monospace, monospace; font-size: 1em; overflow-y: hidden; margin-bottom: 0px; padding: 0px; word-break: break-all;\"><code class=\"plaintext hljs\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; display: block; overflow-x: auto; padding: 17px 20px 20px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); white-space: pre-wrap; border: 1px solid rgb(229, 232, 236);\">1) npm install config\r\n2) npm install @types/config\r\n3) config\r\n4) default.yaml PORT: 3000 \r\n   DEV.yaml PORT: 3001 \r\n   LOCAL.yaml PORT: 3002 \r\n5) index.ts\r\n   // const port = process.env.PORT;\r\n      const port = config.get(\'PORT\');\r\n6) IDEA server:watch -- Environment\r\n    NODE_ENV=DEV\r\n    NODE_ENV=LOCAL\r\n\r\n-- packages:\r\n\r\nhusky - commits in Git\r\nsemantic-release - Commits formatting and version control\r\n\r\npretty-quick - run prettier for changed files\r\nprettier - code formtatter\r\neslint-config-prettier - resolve conflicts between eslint and prettier\r\neslint-plugin-prettier - run prettier as eslint rules\r\n\r\nmock-socket - websocket mock\r\njest-websocket-mock - websocket testing\r\njest-sonar-reporter - convert reports from jest format to sonar format\r\njest-mock-extended - mocks for objects and interfaces\r\n\r\nws - websocket\r\n\r\ntypescript-string-operations - String.format\r\nlodash - useful functions for js\r\nhttp-status-codes - constants for HTTP statuses\r\nmoment - time library for js\r\n\r\nncp - copy files\r\njs-yaml - working with yaml files\r\n\r\nmongodb - package with functions for Mongo\r\nmigrate-mongo - migration for Mongo\r\n\r\nlog-timestamp - write current time in log messages\r\n\r\naxios - HTTP client\r\n\r\napplicationinsights - integration with Azure Application Insights</code></pre></li></ol>', 'Published', '2021-01-29 17:56:54', NULL);
INSERT INTO `post` (`id`, `title`, `content`, `status`, `created_at`, `updated_at`) VALUES
(63, 'Ant Design Component Customization and Bundle Optimization', '<h3 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 22px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Problems with using UI libraries</h3><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">UI libraries provide developers with a variety of ready-to-use components that are commonly required in any project. Usually, such components are covered with tests, and they support the most common use cases.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If you\'re going to use one of these libraries, you should be ready to face the next two problems:</p><ol style=\"margin: 32px 0px 0px; padding: 0px 0px 0px 32px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"line-height: 24px; position: relative; margin-top: 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">Surely, every project requires UI components to be modified. The components must match the project design. Moreover, it\'s often needed to develop or change some components\' logic for particular use cases.</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">The majority of UI libraries include more components, icons, and utilities than will be used in one project, at least in its early stages. But all these files might be put into the bundle, which can dramatically increase the initial loading time for your app.</p></li></ol><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The first issue is solved by the customization of library components, and the second is tackled by bundle optimization. Some libraries, including Ant Design, are already adapted for tree shaking, which lets the bundler automatically exclude unused modules from the bundle.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">However, even if you use Ant Design, built-in tree shaking support will be not enough to achieve effective bundle size. All the icons of this library will be included in the bundle, as well as the entire Moment.js library with every localization file since it is a dependency for some Ant components. Moreover, if some of the Ant components are re-exported in one file, each of them will be added to the bundle. Even if only one of them is used.</p><h3 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 22px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Methods of customization</h3><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Let’s begin by defining available solutions for customization of UI library components.</p><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">1. Redefinition of global classes (CSS only)</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">This is the simplest method. You just need to add styles for global CSS classes, which are used by UI library components.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The cons:</p><ul style=\"margin: 32px 0px 0px; padding: 0px 0px 0px 32px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"line-height: 24px; position: relative; margin-top: 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">The behavior and logic of components can’t be changed or added.</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">CSS-in-JS may be used in this way, but only for global class definition, without the superpowers of this solution.</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">Global class usage causes unwanted style mixing: the same classes might be used in other parts of a project, and the selected UI-library may be used by third-party modules on the same site.</p></li></ul><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Indeed, the only advantage of this method is its simplicity.</p><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">2. Local wrappers for components</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">This method is more advanced, and it involves creating a separate file in your project for every component that you need to customize. Inside such a file, you make a new component, which renders inside itself the optional one from the UI-library.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The pros:</p><ul style=\"margin: 32px 0px 0px; padding: 0px 0px 0px 32px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"line-height: 24px; position: relative; margin-top: 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">It lets you customize the styles of the components and also modify component logic.</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">You can use all the powers of CSS-in-JS at the same time.</p></li></ul><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The cons:</p><ul style=\"margin: 32px 0px 0px; padding: 0px 0px 0px 32px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"line-height: 24px; position: relative; margin-top: 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">If an original component is used widely across the project, you will need to change all its imports to your new wrapper’s source. It can be quite time-consuming depending on the component usage broadness.</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">Suppose you use IDE autocomplete to automatically import selected components, using this approach. In that case, you will need to pay attention to the component you select from the list because you will have at least two of them: the customized one and the original one. It\'s easy to forget about this and pick the original component or even accidentally leave imports of some original ones after creating a new wrapper.</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">And the most important thing: many of the components are complex, and they use inside themselves other components of the same library. Since the original components have absolutely no idea about our wrappers, they will continue to use the original ones inside themselves, ignoring the logic or appearance changes made in wrappers. For example, such an Ant Design component as AutoComplete renders inside itself the components Input and Select. At the same time, inside List are used Grid, Pagination, and Spin. The same thing with Password, Search, and Textarea, which are the dependencies for Input, and so on.</p></li></ul><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">3. Forking the UI library repository</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Making a private copy of the original UI library repository seems to be the most powerful and the most complicated approach at once.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The pros:</p><ul style=\"margin: 32px 0px 0px; padding: 0px 0px 0px 32px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"line-height: 24px; position: relative; margin-top: 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">It gives you maximum freedom in appearance customization and logic modification.</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">There is the opportunity to reuse the same forked UI library in other projects.&nbsp;</p></li></ul><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The cons:</p><ul style=\"margin: 32px 0px 0px; padding: 0px 0px 0px 32px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><li style=\"line-height: 24px; position: relative; margin-top: 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">You could meet some complications when you try to pull the original repository updates to the forked one.&nbsp;</p></li><li style=\"line-height: 24px; position: relative; margin: 12px 0px 0px;\"><p style=\"line-height: 24px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; clear: both;\">It can be quite inconvenient for developers to continuously modify components in a separate repository to meet the main project’s requirements.&nbsp;</p></li></ul><h3 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 22px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">How we have been customizing Ant components</h3><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">After a long discussion, our team decided to use the Ant Design UI library for new projects. My responsibility was to create a boilerplate for a new project, which will be used later to launch other projects. It is crucial for us to change styles and also to modify and add logic for components.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We didn\'t want to fork the Ant Design repository because we had a bad experience separating the components to a detached repo. Developing&nbsp;<a href=\"http://mcs.mail.ru/\" style=\"color: rgb(84, 142, 170); text-decoration: none; margin-top: 0px;\"><u style=\"margin-top: 0px;\">MCS</u></a><u>,</u>&nbsp;we\'ve been using the Semantic UI library, storing its components in a separate repository. No convenient way of working with that was found. For the first time, we used to share this repository with another project (<a href=\"https://cloud.mail.ru/\" style=\"color: rgb(84, 142, 170); text-decoration: none;\"><u style=\"margin-top: 0px;\">b2c-cloud</u></a>), developing different themes for each other. But that was inconvenient, and changes for one project could accidentally affect another, so at some point, we forked from this repository again. Eventually, we moved the wrappers from the detached repository to the project, and we\'re pretty happy with that.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">I\'ve chosen the second approach to create wrappers directly in the project. At the same time, I wanted customized components to be imported right from the&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">antd</code>&nbsp;module. This allows us to avoid changing imports of already used components when we make wrappers for them.&nbsp; This also saves tree shaking and makes complex components automatically use custom wrappers instead of original components inside themselves.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">After that, I will tell you how meeting these requirements was achieved step by step, and you will understand how to implement the same approach in other projects.</p><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Step 1. Files with wrappers</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">In the folder where project components are stored, I made a new catalog for future wrappers, called&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">antd</code>. Here, we gradually added new files for wrappers, depending on our demands in modification. Every file is a composition, a wrapper component rendering an original one imported from a UI library. Let’s look at the simplified example of such a file:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs javascript\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">import</span> AntButton, {\r\n    ButtonProps <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> AntButtonProps,\r\n} <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/button/index\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> Tooltip <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/tooltip\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> classNames <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'classnames\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> React <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'react\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">import</span> styled <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'styled-components\'</span>;\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> ButtonStyled = styled(AntButton)<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">`\r\n    background-color: red;\r\n`</span>;\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> type ButtonProps = AntButtonProps &amp; {\r\n    tooltipTitle?: React.ReactNode;\r\n};\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> Button = <span class=\"hljs-function\">(<span class=\"hljs-params\" style=\"margin-top: 0px;\">{ tooltipTitle, ...props }: ButtonProps</span>) =&gt;</span> {\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> button = (\r\n        <span class=\"xml\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">ButtonStyled</span> {<span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">...props</span>} <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">className</span>=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">{classNames(props.className)}</span> /&gt;</span>\r\n    );\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">if</span> (tooltipTitle) {\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"xml\"><span class=\"hljs-tag\" style=\"margin-top: 0px;\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">Tooltip</span> <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">title</span>=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">{tooltipTitle}</span>&gt;</span>{button}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">Tooltip</span>&gt;</span></span>;\r\n    }\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> button;\r\n};\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> Button;</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">To demonstrate a method of style customization, I just changed the component background color using Styled Components. To show the method of logic customization, I added the&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">tooltipTitle</code>&nbsp;parameter to additionally render a tooltip when it is passed.</p><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Step 2. Change component imports with aliases to wrappers</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now let\'s consider how to make a builder (here: Webpack) change the original path of modules imported from the root of&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">antd</code>&nbsp;to the path of our wrappers.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We should create an&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">index.ts</code>&nbsp;file in the root folder with wrappers&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">src/components/antd</code>&nbsp;and copy into this file the content of the file located at&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">node_modules/antd/lib/index.d.ts</code>. Then, using the massive replace tool of some IDE, we change every import path from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">./componentName</code>&nbsp;to&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">antd/lib/componentName</code>.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">By this point, there should be the next content:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs coffeescript\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Affix } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/affix\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Anchor } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/anchor\'</span>;\r\n...\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Upload } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/upload\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> version } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/version\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Button } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/version\'</span>;</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Then, we change the import paths of the components for which we made the wrappers. In this case, we should import Button from&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">src/components/antd/Button</code>:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs coffeescript\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Affix } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/affix\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Anchor } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/anchor\'</span>;\r\n...\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Upload } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/upload\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> version } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd/lib/version\'</span>;\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Button } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'src/components/antd/Button\'</span>;</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now we only need to configure Webpack to use these paths as the aliases to the Ant components. I\'ve made a simple tool that makes the set of aliases.&nbsp;</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><span style=\"font-weight: bolder; margin-top: 0px;\">The code for this tool (AntAliases.ts) you can see under the spoiler.</span></p><details class=\"spoiler\" style=\"background: rgb(250, 250, 250); border-radius: 4px; padding: 16px 36px; overflow: hidden; margin-top: 32px; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><summary style=\"display: inline-block; color: rgb(84, 142, 170); outline: 0px; position: relative; line-height: 19px; border-bottom: 1px dashed; white-space: nowrap; margin-top: 0px;\">Spoiler</summary></details><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">&gt; Worth noting,&nbsp;<span style=\"font-weight: bolder; margin-top: 0px;\">the solution to the problem with complex components is using original nested elements instead of the custom ones</span>. There is a piece of code in the file AntAliases.ts that finds relative imports of nested components inside the complex ones located in the Ant Design library folder files. It then creates aliases for these imports, making complex components use our custom wrappers for the nested components.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The resolve section of our Webpack config looks like this:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs css\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">...\r\n    <span class=\"hljs-selector-tag\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">resolve</span>: {\r\n        <span class=\"hljs-attribute\" style=\"color: rgb(80, 161, 79);\">alias</span>: {\r\n            ...AntAliasesEs,\r\n        },\r\n    },\r\n...</code></pre><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Step 3. TypeScript support (optional)</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The first two steps are enough to work on their own. However, if you use TypeScript and change interfaces of original components in your wrappers (as I did in the example, having added the additional property&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">tooltipTitle</code>), then you will need to add aliases to the TypeScript config. In this case, it\'s much simpler than it was with Webpack; you simply add the path of the file with imports of the wrappers from the previous step to&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">tsconfig.json</code>:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs erlang\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">...\r\n    <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79); margin-top: 0px;\">\"paths\"</span>: {\r\n        <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"antd\"</span>: [<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"src/components/antd\"</span>],\r\n    },\r\n...</code></pre><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Step 4. Variables (optional)</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As we use Styled Components for our projects, it\'s pretty convenient for us to declare style variables in a single ts file and import some of them where we need them. Ant Design styles were written using Less.js, which allows us to build styles in our project, injecting our variables using less-loader. Thus, it\'s a great opportunity to use the same variables inside our components and wrappers, as well as to build styles of the original components with them.&nbsp;</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Because our style guide implies naming variables and functions in camelCase, initially we defined variables in this case. Ant Designless-files use kebab-case for variable naming, thus we automatically transform and export these variables in kebab-case as well.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Our file with style variable declarations in short form looks like this:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs javascript\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">import</span> _ <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'lodash\'</span>;\r\n\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> CssColors = {\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">primaryColor</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'#2469F5\'</span>,\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">linkColor</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'#2469F5\'</span>,\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">linkHoverColor</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'#2469F5\'</span>,\r\n\r\n            <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// non antd</span>\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">defaultBg</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'#f0f0f0\'</span>,\r\n        };\r\n\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> CssSizes = {\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">fontSizeSmall</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'12px\'</span>,\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">fontSizeBase</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'15px\'</span>,\r\n\r\n            <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// non antd</span>\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">basicHeight</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'40px\'</span>,\r\n        };\r\n\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> CssOtherVars = {\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">linkDecoration</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'none\'</span>,\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">linkHoverDecoration</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'underline\'</span>,\r\n\r\n            <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// non antd</span>\r\n            <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">disabledOpacity</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'0.75\'</span>,\r\n        };\r\n\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> CssVariables = {\r\n            ...CssColors,\r\n            ...CssSizes,\r\n            ...CssOtherVars,\r\n        };\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">function</span> <span class=\"hljs-title\" style=\"color: rgb(64, 120, 242);\">getKebabVariables</span>(<span class=\"hljs-params\">variables: Record&lt;string, string&gt;</span>) </span>{\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> entriesKebab = <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">Object</span>.entries(variables).map(<span class=\"hljs-function\">(<span class=\"hljs-params\" style=\"margin-top: 0px;\">[key, value]</span>) =&gt;</span> {\r\n                <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> [_.kebabCase(key), value];\r\n            });\r\n            <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">Object</span>.fromEntries(entriesKebab);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> CssVariablesKebabCase = getKebabVariables(CssVariables);</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">You can see the complete list of Ant Design variables in&nbsp;<a href=\"https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less\" style=\"color: rgb(84, 142, 170); text-decoration: none; margin-top: 0px;\"><u style=\"margin-top: 0px;\">this file</u></a>.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We do injection of variables and building of less-files by adding less-loader into the Webpack configuration:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs javascript\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">...\r\n    {\r\n        <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1); margin-top: 0px;\">test</span>: <span class=\"hljs-regexp\" style=\"color: rgb(80, 161, 79);\">/\\.less$/</span>,\r\n        include: <span class=\"hljs-regexp\" style=\"color: rgb(80, 161, 79);\">/node_modules/</span>,\r\n        use: [\r\n            ...\r\n            {\r\n                <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">loader</span>: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'less-loader\'</span>,\r\n                <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">options</span>: {\r\n                    <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">sourceMap</span>: <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">true</span>,\r\n                    <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">javascriptEnabled</span>: <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">true</span>,\r\n                    <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">plugins</span>: [\r\n                        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">new</span> CleanCSSPlugin({ <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">advanced</span>: <span class=\"hljs-literal\" style=\"color: rgb(1, 132, 187);\">true</span> }),\r\n                    ],\r\n                    <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">modifyVars</span>: CssVariablesKebabCase,\r\n                },\r\n            },\r\n        ],\r\n    },\r\n...</code></pre><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">The component example</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Once you have completed the first two steps, everything should work fine. Let\'s have a look at the code in which we use the modified component:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs javascript\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">import</span> { Button } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd\'</span>;\r\n\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">export</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">const</span> SomeComponent = <span class=\"hljs-function\"><span class=\"hljs-params\" style=\"margin-top: 0px;\">()</span> =&gt;</span> {\r\n    <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">return</span> <span class=\"xml\"><span class=\"hljs-tag\" style=\"margin-top: 0px;\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">Button</span> <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">tooltipTitle</span>=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"some tooltip text\"</span>&gt;</span>some button text<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">Button</span>&gt;</span></span>\r\n}</code></pre><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">The problem with Grid and Radio</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">You can omit this part if you don\'t plan to make Grid and Radio render wrapped components inside themselves instead of original ones. This problem is caused by the fact that Grid is virtually not a separate component. In fact, its source located at&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">node_modules/antd/es/grid/index.js</code>&nbsp;contains only re-exports of the components Col and Row.&nbsp;</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">All the other complex components already use our wrappers, thanks to aliases we made. But when we use Grid it will still import original Col and Row because of its file content. To fix this we should consider the next steps.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">To illustrate this case, I made&nbsp;<a href=\"https://github.com/ikopenkov/ant-customization/blob/master/src/components/antd/Col/Col.tsx\" style=\"color: rgb(84, 142, 170); text-decoration: none; margin-top: 0px;\"><u style=\"margin-top: 0px;\">a wrapper for the Col component</u></a>&nbsp;and made its background red by default. I rendered the original List component for the test and want it to render the modified Col for its columns.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs xml\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-tag\" style=\"margin-top: 0px;\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">List</span>\r\n    <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">data-testid</span>=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\"list\"</span>\r\n    <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">grid</span>=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">{{</span> <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">column:</span> <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">2</span> }}\r\n    <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">dataSource</span>=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">{[</span>\'<span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">Item</span> <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">1</span>\', \'<span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">Item</span> <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">2</span>\']}\r\n    <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">renderItem</span>=<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">{(item)</span> =&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">List.Item</span>&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">List.Item</span>&gt;</span>}\r\n/&gt;</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">To make List use exactly our wrapper instead of the default Col, we created a new file to replace original re-exports located in&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">node_modules/antd/es/grid/index.js</code>&nbsp;with paths to our wrappers. We applied this new file to&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">antd/Grid.ts</code>, and here is its content:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs pgsql\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">export { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Col } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'src/components/antd/Col; // path to our wrapper for Col\r\nexport { Row } from \'</span>antd/es/grid/<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">index</span><span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'; // still reexport default Row as we didn\'</span>t make a <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">wrapper</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">for</span> it yet</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now we only need to set the path to this file in the constant&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">SPECIAL_ALIASES</code>&nbsp;defined in&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">AntAliases.ts</code>:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs cs\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">...\r\n<span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">const</span> SPECIAL_ALIASES = {\r\n    grid: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'src/components/antd/Grid\'</span>,\r\n    radio: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'src/components/antd/Radio\'</span>, <span class=\"hljs-comment\" style=\"color: rgb(160, 161, 167); font-style: italic;\">// just to illustrate how to do the same for Radio</span>\r\n};\r\n...</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Finally, the customization part is over. Now List will render our Col wrapper as its columns. To customize Row as well just make a wrapper and change the Row path at&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">src/components/antd/Grid.tsx</code>. It\'s not very convenient to do, but you only need it for two components: Grid and Radio. Although, during the last year, we haven\'t received demand for that in our projects.</p><h3 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 22px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Bundle optimization</h3><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Tree shaking</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As I mentioned, the latest version of Ant Design is adapted for tree shaking right out of the box. Its previous versions weren’t, so we used to use babel-plugin-import to drop the unused code. I assume that the other libraries without built-in tree shaking support can achieve this, at least partially, using this plugin.&nbsp;</p><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Styles import</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Despite native tree shaking support, we didn\'t drop babel-plugin-import and continue to use it to automatically get styles of a component when we import its js-code. Using it, no excess styles are added to the bundle, and developers don\'t need to think about style dependencies. Now, it\'s impossible to forget to import the styles of some components.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">The plugin is enabled in the&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">babel.config.js</code>&nbsp;file in the root of the project:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs java\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">...\r\n    [\r\n        <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79); margin-top: 0px;\">\'import\'</span>,\r\n        {\r\n            libraryName: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd\'</span>,\r\n            libraryDirectory: <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'es\'</span>,\r\n            style: <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">true</span>,\r\n        },\r\n        <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'antd\'</span>,\r\n    ],\r\n...</code></pre><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Moment.js</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">At this time, the bundle consists of the following modules:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/2e5/106/e81/2e5106e81f9e9d8873bffb090d7ad741\" width=\"1600\" height=\"852\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Ant Design uses Moment.js, which pulls all the localization files it has to the bundle. You can see in the image how dramatically it increases the size of the bundle. If you don\'t need such components depending on Moment.js, such as DatePicker, you can simply cut this library, for example, by adding an alias for Moment.js to some empty file.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As we\'re still using Moment.js for our projects (ignoring the fact that its creators have recently deprecated it ?), we didn\'t need to fully eliminate it. We just excluded useless localization files from adding to the bundle, leaving only supported languages (en and ru).</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">It became possible thanks to ContextReplacementPlugin, delivered with Webpack:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs javascript\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">...\r\n    plugins: [\r\n        <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">new</span> webpack.ContextReplacementPlugin(<span class=\"hljs-regexp\" style=\"color: rgb(80, 161, 79);\">/moment[/\\\\]locale$/</span>, <span class=\"hljs-regexp\" style=\"color: rgb(80, 161, 79);\">/ru|en-gb/</span>),\r\n    ],\r\n...</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Now we can make sure that redundant files are eliminated, as in the next screenshot:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/c23/094/4a4/c230944a43a2e99eabd651f1c241cddd\" width=\"1600\" height=\"852\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">&gt; If you use Lodash and/or Ramda and want to exclude their unused files from the bundle, but at the same time you don\'t want to import every function from their separate files, you can just add to your Babel config&nbsp;<a href=\"https://github.com/lodash/babel-plugin-lodash\" style=\"color: rgb(84, 142, 170); text-decoration: none; margin-top: 0px;\"><u style=\"margin-top: 0px;\">babel-plugin-lodash</u></a>&nbsp;and&nbsp;<a href=\"https://github.com/megawac/babel-plugin-ramda\" style=\"color: rgb(84, 142, 170); text-decoration: none;\"><u style=\"margin-top: 0px;\">babel-plugin-ramda</u></a>.</p><h4 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 18px; line-height: 26px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Icons</h4><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Webpack Bundle Analyzer screenshots above show that the heaviest part of the bundle is the Ant Design built-in icon set. This happens because Ant Design exports icons from a single file.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We use unique custom icons in our projects, so we don\'t need this file at all. You can cut it off, as well as Moment.js, just by making an alias to some empty file. However, I want to illustrate the ability to save only the required default icons if you want to use them.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">For that reason, I added the file&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">src/antd/components/Icons.tsx</code>. I left there only the Spinner icon to render a button in state&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis;\">\"loading\"</code>:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs coffeescript\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164); margin-top: 0px;\">export</span> { <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">default</span> <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">as</span> Loading } <span class=\"hljs-keyword\" style=\"color: rgb(166, 38, 164);\">from</span> <span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'@ant-design/icons/lib/outline/LoadingOutline\'</span>;</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">I also added an alias to this file into the Webpack config.</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs lua\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\">...\r\n<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79); margin-top: 0px;\">\'@ant-design/icons/lib/dist$\'</span>: <span class=\"hljs-built_in\" style=\"color: rgb(193, 132, 1);\">path</span>.resolve(<span class=\"hljs-string\" style=\"color: rgb(80, 161, 79);\">\'src/components/antd/Icons.tsx\'</span>),\r\n...</code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">And now we just need to render the button itself:</p><pre style=\"font-family: monospace, monospace; font-size: 16px; overflow-y: hidden; margin-top: 32px; margin-bottom: 0px; padding: 0px; word-break: break-all; color: rgb(51, 51, 51);\"><code class=\"hljs xml\" style=\"font-family: monospace, monospace; font-size: 1em; display: block; overflow: hidden; padding: 16px 32px; color: rgb(56, 58, 66); background: rgb(251, 253, 255); vertical-align: middle; border-radius: 4px; white-space: pre-wrap; max-width: 100%; text-overflow: ellipsis; border: 1px solid rgb(238, 238, 238); margin-top: 0px;\"><span class=\"hljs-tag\" style=\"margin-top: 0px;\">&lt;<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">Button</span> <span class=\"hljs-attr\" style=\"color: rgb(152, 104, 1);\">loading</span>&gt;</span>Loading<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\" style=\"color: rgb(228, 86, 73); margin-top: 0px;\">Button</span>&gt;</span></code></pre><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">As a result, we get the bundle with only the one icon we used instead of getting the full pack of icons as before:</p><figure class=\"full-width \" style=\"margin-top: 32px; padding: 0px; line-height: 0; text-align: center; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\"><img src=\"https://habrastorage.org/getpro/habr/upload_files/735/634/1cf/7356341cf25a81df6c99e6f8c3e749d0\" width=\"1600\" height=\"852\" style=\"border: 0px; height: auto; margin: 0px; max-width: 100%;\"></figure><p style=\"line-height: 24px; margin: 32px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Optionally, you can easily replace default icons with standard ones using the same file we\'ve just created.</p><h3 style=\"-webkit-font-smoothing: antialiased; margin: 32px 0px 0px; font-size: 22px; line-height: 32px; font-family: &quot;Fira Sans&quot;, sans-serif; color: rgb(51, 51, 51);\">Conclusion</h3><p style=\"line-height: 24px; margin: 12px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Finally, every unused component of Ant Design has been cut off by Webpack. At the same time, we continue to import any component, whether it is a wrapper or an original one, from the root of the library.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">Moreover, during development, TypeScript will show proper types for customized components as it was with Button from the example above, for which we added the additional property&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">tooltipTitle</code>.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">If we decide to customize another component in the project, even a widely used one, we will just need to add a file with the wrapper and change the path of that component in the file with re-exports located at&nbsp;<code style=\"font-family: monospace, monospace; font-size: 1em; display: inline-block; vertical-align: middle; padding: 3px 5px; border-radius: 4px; background-color: rgb(250, 250, 250); white-space: nowrap; max-width: 100%; overflow: hidden; text-overflow: ellipsis; margin-top: 0px;\">src/components/antd/index.ts</code>.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">We\'ve been using this approach for more than a year in two different projects, and we still haven\'t found any flaws.</p><p style=\"line-height: 24px; margin: 24px 0px 0px; clear: both; color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Arial, sans-serif;\">You can see the ready-to-use boilerplate with a prototype of this approach and the examples described in this article&nbsp;<a href=\"https://github.com/ikopenkov/ant-customization\" style=\"color: rgb(84, 142, 170); text-decoration: none; margin-top: 0px;\"><u style=\"margin-top: 0px;\">in my repository</u></a>. Along with this solution, we test our components using Jest and React Testing Library. This will be addressed in a different post, as it includes a few tricky elements.</p>', 'Published', '2021-01-29 17:59:06', '2021-02-03 21:24:57');

-- --------------------------------------------------------

--
-- Структура таблицы `user`
--

CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `username` varchar(180) COLLATE utf8mb4_unicode_ci NOT NULL,
  `roles` longtext COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '(DC2Type:json)',
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `user`
--

INSERT INTO `user` (`id`, `username`, `roles`, `password`) VALUES
(1, '123', '[\"ROLE_USER\"]', '$argon2id$v=19$m=65536,t=4,p=1$VGwvcU1pSzB1UW83WTRySQ$2J04plcMfL+KfWuqDBT2/+Wgk5jy3ZcSyV3N5NZmjaw'),
(3, '1234', '[\"ROLE_USER\"]', '$argon2id$v=19$m=65536,t=4,p=1$TXdzU1pRbFdnNHNrQmxwbA$UJo+bC3lFotzN/Q64kp8UsEo4DlSVfpX5/0grYkTp7s'),
(4, '112', '[\"ROLE_USER\"]', '$argon2id$v=19$m=65536,t=4,p=1$bFQ4Z1o5Q0FLUFJlQmhVLw$3jTTJAR79NCHw1XyOKzfgH20+h3HWeuG7oQ2QSMDI+s');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `doctrine_migration_versions`
--
ALTER TABLE `doctrine_migration_versions`
  ADD PRIMARY KEY (`version`);

--
-- Индексы таблицы `metas`
--
ALTER TABLE `metas`
  ADD PRIMARY KEY (`id`),
  ADD KEY `IDX_4D6AF93C4B89032C` (`post_id`);

--
-- Индексы таблицы `post`
--
ALTER TABLE `post`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `UNIQ_8D93D649F85E0677` (`username`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `metas`
--
ALTER TABLE `metas`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT для таблицы `post`
--
ALTER TABLE `post`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=66;

--
-- AUTO_INCREMENT для таблицы `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `metas`
--
ALTER TABLE `metas`
  ADD CONSTRAINT `FK_4D6AF93C4B89032C` FOREIGN KEY (`post_id`) REFERENCES `post` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
